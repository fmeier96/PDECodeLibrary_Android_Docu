(function () {
/**
 * @fileOverview	Config module for jQuery
 * @module 			config/jquery
 * @exports 		config/jquery
 * @description		Config module for jQuery
 * @requires 		jQuery
 * @author			mehrwert
 * @version			$Id: jquery.js 2559 2012-08-24 17:23:40Z m.straschek $
 */
define('shared/config/jquery', [
	'jquery'
], function($){

	var exports = {

		/**
		 * Init function
		 */
		init: function() {
			exports.toggleHtmlClass();
			exports.replaceAnimateFn();
			exports.emitDtagReadyEvent();
		},

		/**
		 * Delegate .transition() calls to .animate() if the browser can't do CSS transitions.
		 */
		replaceAnimateFn: function() {
			if ($.support.transition) {
				// save animate for dtag_tooltip
				$.fn.animate_orig = $.fn.animate;
				$.fn.animate = $.fn.transition;
			}
		},

		toggleHtmlClass: function() {
			$('html').removeClass('no-js').addClass('js');
		},

		emitDtagReadyEvent: function () {
			/* Emit ready event, because everything should be loaded now. User-JS can now start running.
			 * Could evaluate if this emit-call can go higher up in the dependency-chain,
			 * to start running User-JS earlier. Need to make sure that everything relevant is loaded, though.
			 */
			window.dtag.emit('ready');
		}
  };

	(function ($) {
		exports.init();
	})($);

});




/**
 * @fileOverview	Settings slider
 * @module 			template/settingsSlider
 * @exports			template/settingsSlider
 * @author			mehrwert
 * @version			$Id: settingsSlider.js 3483 2012-12-10 16:30:30Z m.straschek $
 */
define('template/settingsSlider', ['jquery'], function($){

	var exports = {

		/**
		 * Flag if drawer slider is attached
		 */
		isAttached: false,
		drawerSliderObject: {},
		setDrawerSliderObject: function(obj) {
			if (typeof obj === 'object') {
				exports.drawerSliderObject = obj;
			} else {
				if (window.console && dtag.debug === true) {
					console.error('Could not identify a drawer object!');
				}
			}
		},

		/**
		 * The settings object
		 */
		settings: {},

		/**
		 * Set function
		 */
		setSettings: function() {
			exports.settings = $('#dtag_settings');
		},

		/**
		 * Attach function
		 *
		 * @return 		void
		 */
		attach: function() {
			if (exports.isAttached === false) {
				exports.setSettings();
				$(exports.settings).css({
					'overflow': 'hidden',
					'height': 0
				});

				$(document).on('click', '[data-is-settings-caller="true"]', function(event) {
					event.preventDefault();
					if ($(exports.settings).height() != 0) {
						exports.close();
					} else {
						exports.open();
					}
				});
				exports.isAttached = true;
			}
		},

		/**
		 * Detach function
		 *
		 * @return 		void
		 */
		detach: function () {
			if (exports.isAttached === true) {
				$(exports.settings).hide(); // .insertAfter('#dtag_drawer');
				$(document).off('click', '[data-is-settings-caller="true"]');
				// $('.dtag-settings-caller').off('click');
				exports.isAttached = false;
			}
		},

		/**
		 * Open function
		 *
		 * @return 		void
		 */
		open: function() {
			if (exports.isAttached === true) {
				exports.setSettings();
				exports.drawerSliderObject.close();
				$(exports.settings).insertAfter('#dtag_drawer').show().animate({
					height: $('.dtag-inner', $(exports.settings)).height()
				}, 250, function(){
					$(exports.settings).css('height','auto');
				});
			}
		},

		/**
		 * Close function
		 *
		 * @return 		void
		 */
		close: function() {
			if (exports.isAttached === true) {
				exports.setSettings();
				$(exports.settings).css({
					height: $(exports.settings).height()
				});
				$(exports.settings).animate({
					height: '0'
				}, 250);
			}
		}
	};
	return exports;

});
/**
 * @fileOverview	Drawer slider
 * @module 			template/drawerSlider
 * @exports			template/drawerSlider
 * @author			mehrwert
 * @version			$Id: drawerSlider.js 3477 2012-12-10 15:30:02Z m.straschek $
 * @todo			refactor to "tool chooser", not "drawer"
 */
define('template/drawerSlider', ['jquery'], function($){

	/**
	 * @type	{Object}	The tool chooser
	 */
	var drawer,
		exports = {

			/**
			 * Flag if drawer slider is attached
			 */
			isAttached: false,

			/**
			 * Check if tool chooser should not be closed
			 * @return {Boolean}
			 */
			doNotCloseDrawerOnInit: function() {
				var flag = false;
				if ($('body').data('doNotCloseDrawer') === true) {
					flag = true;
				}
				return flag;
			},

			/**
			 * Check if tool icon tiles should be aligne left
			 * Actually this shall be the caes if more than 6
			 * are aneabled for the current user
			 *
			 */
			reAlignToolChooser: function() {
				var $toolChooser = $('#dtag_toolchooser');
				var toolChooserItemsLength = $('.tool-tile', $toolChooser).length;
					if (toolChooserItemsLength > 6) {
					$toolChooser.addClass('aligned-left');
				}
			},

			/**
			 * Attach function
			 *
			 * @return 		void
			 */
			attach: function() {
				if (exports.isAttached === false ) {
					exports.reAlignToolChooser();
					drawer = $('#dtag_drawer');
					drawer.css({'overflow': 'hidden'});

					$(document).on('click', '[data-is-drawer-caller="true"]', function(event) {

						event.preventDefault();

						if (drawer.height() != 0) {
							exports.close(250);
						} else {
							exports.open();
						}

					});

					var doNotClose = exports.doNotCloseDrawerOnInit();
					if (doNotClose === false) {
						exports.close(0);
					} else {
						$('[data-is-drawer-caller="true"]').addClass('active');
						exports.open(0);
					}
					exports.isAttached = true;

				}
			},

			/**
			 * Detach function
			 *
			 * @return 		void
			 */
			detach: function () {
				if (exports.isAttached === true) {
					$(document).off('click', '[data-is-drawer-caller="true"]');
					exports.isAttached = false;
				}
			},

			/**
			 * Open function
			 *
			 * @return 		void
			 */
			open: function() {
				require(['template/settingsSlider'], function(settingsSlider) {
					if (settingsSlider.isAttached === true) {
						settingsSlider.close();
					}
				});
				$('[data-is-drawer-caller="true"]').addClass('active');

				drawer.animate({
					height: $('.dtag-inner',drawer).height()
				}, 250, function(){
					drawer.css('height','auto');
				});
			},

			/**
			 * Close function
			 *
			 * @return 		void
			 */
			close: function(duration) {
				$('[data-is-drawer-caller="true"]').removeClass('active');
				drawer.css({
					height: $(drawer).height()
				});
				// set minimal timeout to ensure that drawer height has been really set
				// due to problems in merges JS
				setTimeout(function(){
					drawer.animate({
						height: '0'
					}, duration);
				}, 20);
			},

			/**
			 * Caller mover  function
			 * Prepends calling element to element given param
			 *
			 * @param		{string}	to		the sizzle selector
			 * @return 		void
			 */
			moveCaller: function(to) {
				$('[data-is-drawer-caller="true"]').prependTo($(to));
			}

		};

	return exports;

});

/**
 * @fileOverview	Helpdesk mover
 * @module 			template/helpdesk
 * @exports			template/helpdesk
 * @author			mehrwert
 * @version			$Id: helpdesk.js 3345 2012-12-04 10:08:10Z m.straschek $
 */
define('template/helpdesk', ['jquery'], function($){

	var exports = {

		/**
		 * Storage variable for helpdesk button
		 */
		helpdeskCaller: {},

		/**
		 * Init function
		 * Store helpdesk button
		 * @return	void
		 */
		init: function(){
			// button beveled icon-only icon-help dialog-external-link
			exports.helpdeskCaller = $('[data-is-helpdesk-caller="true"]').addClass('button icon-only icon-help_2');
		},

		/**
		 * Append helpdesk button to service level
		 */
		appendToServiceLevel: function() {
			$('[data-is-helpdesk-caller="true"]').remove();
			$(exports.helpdeskCaller)
				.prependTo('#dtag_servicelevel .dtag-grid-col-right');
			exports.handleDropdown();
		},

		/**
		 * Append helpdesk button to titleBar
		 */
		appendToTitleBar: function() {
			$('[data-is-helpdesk-caller="true"]').remove();
			$(exports.helpdeskCaller)
				.prependTo('.title-bar .right');
			exports.handleDropdown();
		},

		/**
		 * TODO: refactor
		 */
		handleDropdown: function() {
			var helpdesk = $('#dtag_helpdesklist');
			helpdesk.hide();
			$(document).on('click', '[data-is-helpdesk-caller="true"]', function(event) {
				event.preventDefault();
				if (helpdesk.is(':hidden')) {
					helpdesk.show();
					$(document).on('click.helpdeskDropdown', function(event) {
						$(document).off('click.helpdeskDropdown');
						helpdesk.hide();
					});
				} else {
					helpdesk.hide();
				}
			});
		}

	};
	(function ($) {
		exports.init();
	})($);

	return exports;
});
/*!
 * jQuery Transit - CSS3 transitions and transformations
 * Copyright(c) 2011 Rico Sta. Cruz <rico@ricostacruz.com>
 * MIT Licensed.
 *
 * http://ricostacruz.com/jquery.transit
 * http://github.com/rstacruz/jquery.transit
 */
(function(d){function k(a){var b=["Moz","Webkit","O","ms"],c=a.charAt(0).toUpperCase()+a.substr(1);if(a in i.style)return a;for(a=0;a<b.length;++a){var d=b[a]+c;if(d in i.style)return d}}function j(a){"string"===typeof a&&this.parse(a);return this}function p(a,b,c){!0===b?a.queue(c):b?a.queue(b,c):c()}function m(a){var b=[];d.each(a,function(a){a=d.camelCase(a);a=d.transit.propertyMap[a]||a;a=r(a);-1===d.inArray(a,b)&&b.push(a)});return b}function q(a,b,c,e){a=m(a);d.cssEase[c]&&(c=d.cssEase[c]);
	var h=""+n(b)+" "+c;0<parseInt(e,10)&&(h+=" "+n(e));var f=[];d.each(a,function(a,b){f.push(b+" "+h)});return f.join(", ")}function f(a,b){b||(d.cssNumber[a]=!0);d.transit.propertyMap[a]=e.transform;d.cssHooks[a]={get:function(b){return(d(b).css("transform")||new j).get(a)},set:function(b,e){var h=d(b).css("transform")||new j;h.setFromString(a,e);d(b).css({transform:h})}}}function r(a){return a.replace(/([A-Z])/g,function(a){return"-"+a.toLowerCase()})}function g(a,b){return"string"===typeof a&&!a.match(/^[\-0-9\.]+$/)?
	a:""+a+b}function n(a){d.fx.speeds[a]&&(a=d.fx.speeds[a]);return g(a,"ms")}d.transit={version:"0.1.3",propertyMap:{marginLeft:"margin",marginRight:"margin",marginBottom:"margin",marginTop:"margin",paddingLeft:"padding",paddingRight:"padding",paddingBottom:"padding",paddingTop:"padding"},enabled:!0,useTransitionEnd:!1};var i=document.createElement("div"),e={},s=-1<navigator.userAgent.toLowerCase().indexOf("chrome");e.transition=k("transition");e.transitionDelay=k("transitionDelay");e.transform=k("transform");
	e.transformOrigin=k("transformOrigin");i.style[e.transform]="";i.style[e.transform]="rotateY(90deg)";e.transform3d=""!==i.style[e.transform];d.extend(d.support,e);var o=e.transitionEnd={MozTransition:"transitionend",OTransition:"oTransitionEnd",WebkitTransition:"webkitTransitionEnd",msTransition:"MSTransitionEnd"}[e.transition]||null,i=null;d.cssEase={_default:"ease","in":"ease-in",out:"ease-out","in-out":"ease-in-out",snap:"cubic-bezier(0,1,.5,1)"};d.cssHooks.transform={get:function(a){return d(a).data("transform")},
		set:function(a,b){var c=b;c instanceof j||(c=new j(c));a.style[e.transform]="WebkitTransform"===e.transform&&!s?c.toString(!0):c.toString();d(a).data("transform",c)}};d.cssHooks.transformOrigin={get:function(a){return a.style[e.transformOrigin]},set:function(a,b){a.style[e.transformOrigin]=b}};d.cssHooks.transition={get:function(a){return a.style[e.transition]},set:function(a,b){a.style[e.transition]=b}};f("scale");f("translate");f("rotate");f("rotateX");f("rotateY");f("rotate3d");f("perspective");
	f("skewX");f("skewY");f("x",!0);f("y",!0);j.prototype={setFromString:function(a,b){var c="string"===typeof b?b.split(","):b.constructor===Array?b:[b];c.unshift(a);j.prototype.set.apply(this,c)},set:function(a){var b=Array.prototype.slice.apply(arguments,[1]);this.setter[a]?this.setter[a].apply(this,b):this[a]=b.join(",")},get:function(a){return this.getter[a]?this.getter[a].apply(this):this[a]||0},setter:{rotate:function(a){this.rotate=g(a,"deg")},rotateX:function(a){this.rotateX=g(a,"deg")},rotateY:function(a){this.rotateY=
		g(a,"deg")},scale:function(a,b){void 0===b&&(b=a);this.scale=a+","+b},skewX:function(a){this.skewX=g(a,"deg")},skewY:function(a){this.skewY=g(a,"deg")},perspective:function(a){this.perspective=g(a,"px")},x:function(a){this.set("translate",a,null)},y:function(a){this.set("translate",null,a)},translate:function(a,b){void 0===this._translateX&&(this._translateX=0);void 0===this._translateY&&(this._translateY=0);null!==a&&(this._translateX=g(a,"px"));null!==b&&(this._translateY=g(b,"px"));this.translate=
		this._translateX+","+this._translateY}},getter:{x:function(){return this._translateX||0},y:function(){return this._translateY||0},scale:function(){var a=(this.scale||"1,1").split(",");a[0]&&(a[0]=parseFloat(a[0]));a[1]&&(a[1]=parseFloat(a[1]));return a[0]===a[1]?a[0]:a},rotate3d:function(){for(var a=(this.rotate3d||"0,0,0,0deg").split(","),b=0;3>=b;++b)a[b]&&(a[b]=parseFloat(a[b]));a[3]&&(a[3]=g(a[3],"deg"));return a}},parse:function(a){var b=this;a.replace(/([a-zA-Z0-9]+)\((.*?)\)/g,function(a,d,
																																																																																																																														  e){b.setFromString(d,e)})},toString:function(a){var b=[],c;for(c in this)if(this.hasOwnProperty(c)&&(e.transform3d||!("rotateX"===c||"rotateY"===c||"perspective"===c||"transformOrigin"===c)))"_"!==c[0]&&(a&&"scale"===c?b.push(c+"3d("+this[c]+",1)"):a&&"translate"===c?b.push(c+"3d("+this[c]+",0)"):b.push(c+"("+this[c]+")"));return b.join(" ")}};d.fn.transition=d.fn.transit=function(a,b,c,f){var h=this,g=0,i=!0;"function"===typeof b&&(f=b,b=void 0);"function"===typeof c&&(f=c,c=void 0);"undefined"!==
		typeof a.easing&&(c=a.easing,delete a.easing);"undefined"!==typeof a.duration&&(b=a.duration,delete a.duration);"undefined"!==typeof a.complete&&(f=a.complete,delete a.complete);"undefined"!==typeof a.queue&&(i=a.queue,delete a.queue);"undefined"!==typeof a.delay&&(g=a.delay,delete a.delay);"undefined"===typeof b&&(b=d.fx.speeds._default);"undefined"===typeof c&&(c=d.cssEase._default);var b=n(b),j=q(a,b,c,g),l=d.transit.enabled&&e.transition?parseInt(b,10)+parseInt(g,10):0;if(0===l)return p(h,i,function(b){h.css(a);
		f&&f.apply(h);b&&b()}),h;var k={},m=function(b){var c=false,g=function(){c&&h.unbind(o,g);l>0&&h.each(function(){this.style[e.transition]=k[this]||null});typeof f==="function"&&f.apply(h);typeof b==="function"&&b()};if(l>0&&o&&d.transit.useTransitionEnd){c=true;h.bind(o,g)}else window.setTimeout(g,l);h.each(function(){l>0&&(this.style[e.transition]=j);d(this).css(a)})};p(h,i,function(a){var b=0;e.transition==="MozTransition"&&b<25&&(b=25);window.setTimeout(function(){m(a)},b)});return this};d.transit.getTransitionValue=
		q})(jQuery);
define("transit", function(){});

(function($) {

	var	opts,
		exports = {

			/**
			 * Init function, merges option and dispatches
			 *
			 * @param {Object} options
			 */
			initialize: function(options) {

				opts = $.extend({}, $.fn.dtag_headerLoader.defaults, options);

				$.ajax({
					url: opts.baseUrl + opts.fileName,
					success: function(data) {
						if (typeof opts.onResponse == 'function'){
							content = opts.onResponse.call(this, data);
						} else {
							exports.error('There is no valid onResponse callback in jQuery.dtag_headerLoader.' +
								'Current type is ' + typeof opts.onResponse);
						}
					},
					statusCode: {
						404: function() {
							exports.error('Remote header could not be found! ' +
								'Please verify the request url.');
						},
						500: function() {
							exports.error('The access to the remote header might be denied. ' +
								'Please try to log in to the Experience Toolbox.');
						}
					}
				});

			},

			/**
			 * Error wrapper
			 * @param debug
			 */
			error: function(debug) {
				if (window.console && dtag.debug === true) {
					console.error(debug);
				}
			}

		};

	$.fn.dtag_headerLoader = function(method) {

		if (exports[method]) {
			return exports[method].apply( this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return exports.initialize.apply(this, arguments);
		} else {
			exports.error('Method ' +  method + ' does not exist on jQuery.dtag_headerLoader');
		}

	};

	$.fn.dtag_headerLoader.defaults = {
		fileName: 'unify_header.html',
		baseUrl: $('body').data('toolUrl'),
		onResponse: function() {
			exports.error('There is no custom onResponse callback defined for jQuery.dtag_headerLoader');
		}
	};

}(jQuery));
define("headerLoader", function(){});

/***************************************************************
 * Copyright notice
 *
 * (c) 2012 mehrwert (typo3@mehrwert.de)
 * All rights reserved
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html.
 *
 * This script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

/**
 * Simple breakpoint detection
 * Appends a div element to <body>
 *     which can respond to trivial media queries
 *     here we will use the css property "font-family" because it can
 *     contain a custom sting like "smartphone" or "small-screen"
 *     so we can deal with our breakpoints in a semantical way
 *
 *     example scss:
 *
 *    	#mq_helper {
 *     		display: none;
 *     		font-family: smartphone;
 *     		@media screen and (min-width: 481px) {
 *     			font-family: tablet;
 *     		}
 *			@media screen and (min-width: 960px) {
 *     			font-family: desktop;
 *     		}
 *     	}
 *
 * @author		Michael Straschek <typo3@mehrwert.de>
 * @version		$Id: jquery.mw_breakpoint.js 3482 2012-12-10 16:30:08Z m.straschek $
 * @license		GPL
 */

(function($) {
	$.fn.mw_breakpoint =
		function (params) {

			// Merge options into defaults
			var options = $.extend({}, $.fn.mw_breakpoint.defaults, params),
				currentDevice = undefined,
				detectedDevice = undefined;

			// Add helper div if not existent
			if ($('#' + options.helperElementId).length < 1) {
				$('<div></div>')
					.prop('id',options.helperElementId)
					.appendTo(document.body);
			}

			// Our custom breakpointChange event
			// will call the callback option function
			$(document).on('breakpointChange.' + options.eventNamespace, function(event, device) {
				if (typeof options.callback == 'function') {
					options.callback.call(this, device);
				}
			});

			// Get the font-family of helper element
			// alter currentDevice when changed
			var detectDeviceChange = function() {
				detectedDevice = $('#' + options.helperElementId).css('font-family');
				if (detectedDevice != currentDevice) {
					currentDevice = detectedDevice;
					$(document).trigger('breakpointChange.' + options.eventNamespace, currentDevice);
				}
			};

			// resize event binding and initial triggering
			$(window).on('orientationchange resize', function(){
				detectDeviceChange();
			});
			$(window).trigger('resize');

		};

	/**
	 * Plugin defaults
	 */
	$.fn.mw_breakpoint.defaults = {
		eventNamespace: 'default',
		helperElementId: 'mq_helper',
		callback: function(device){
			if (window.console && dtag.debug === true) {
				console.log('detected device change to '+ device);
			}
		}
	};

})(jQuery);
define("breakpoint", function(){});

/**
 * @fileOverview	Header loader
 * @module 			template/headerLoader
 * @exports			template/headerLoader
 * @author			mehrwert
 */
define('template/headerLoader', [
	'jquery',
	'template/drawerSlider',
	'template/helpdesk',
	'headerLoader',
	'breakpoint'
], function(
	$,
	drawerSlider,
	helpdesk
	){


	/**
	 * The options object
	 * Options here can look like this:

	 **
	 * The response function
	 * defaults to exports.onResponse
	 *
	 * @var {Function}
	 *
	onResponse:function() {},

	 **
	 * The replacement mode
	 * 'drawer'
	 * 'brandlevel+drawer'
	 * 'fullheader'
	 * defaults to 'fullheader'
	 *
	 * @var {String}
	 *
	replace: '',

	 **
	 * The file name or parameters for the header to request
	 * original jquery.dtag_headerLoader option
	 * toolbox related can be as following:
	 * 'unify_header.html'
	 * 'unify_drawer.html'
	 * 'unify_brandlevel_drawer.html'
	 * defaults to 'unify_header.html'
	 *
	 * @var {String}
	 *
	fileName: '',

	 **
	 * The base url for ajax request
	 * original jquery.dtag_headerLoader option
	 * defaults to $('body').data('toolUrl')
	 *
	 * @var {String}
	 *
	baseUrl: '',

	 *
	 * @var {Object}
	 */
	var opts,
		exports = {

			/**
			 * Merge module options with jquery.dtag_headerLoader
			 * Initialize jquery.dtag_headerLoader
			 *
			 * @param {Object} options
			 */
			load: function(options){
				var moduleOptions = {
					onResponse: exports.onResponse,
					replace: 'fullheader'
				};
				opts = $.extend({}, moduleOptions, options);
				$.fn.dtag_headerLoader(opts);
			},

			/**
			 * Response callback for jquery.dtag_headerLoader
			 * Replace header DOM elements
			 * Handle de-/attaching of drawerSlider and helpdesk*
			 * Trigger breakpoint
			 *
			 * @param {String} data
			 */
			onResponse: function(data) {
				if (data != '') {
					drawerSlider.detach();

					exports.replaceInDom(data);

					$.fn.mw_breakpoint('detectBreakpoint', function() {
						$.fn.mw_breakpoint('triggerBreakpoint');
					});
					drawerSlider.attach();
					
					helpdesk.init();
					helpdesk.appendToServiceLevel();
				}
			},

			/**
			 * Replace header in DOM
			 * depending on given string
			 *
			 * @param {String} data response data from jquery.dtag_headerLoader callback
			 */
			replaceInDom: function(data) {

				switch (opts.replace) {

					case 'drawer':
						$('#dtag_drawer').replaceWith(data);
						break;

					case 'brandlevel+drawer':
						$('#dtag_settings').remove();
						$('#dtag_settingslist').remove();
						$('#dtag_brandlevel').remove();
						$('#dtag_drawer').remove();
						$(data).prependTo('#dtag_header');
						$('#dtag_settings').hide();
						break;

					case 'fullheader':
					default:
						$('#dtag_settingslist').remove();
						$('#dtag_settings').remove();
						$('#dtag_header').replaceWith(data);
						$('#dtag_settings').hide();
						break;

				}

				window.dtag.emit('headerLoaded');

			}

		};

	return exports;
});
/*! DTAG Row Events - v0.1.0 - 2012-12-12
* Copyright (c) 2012 Jonas Ulrich | ruhmesmeile; Licensed MIT */
// use AMD if present
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define('libs/jquery/jquery.dtag_rowevents',['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

  /*
   * Generic Row Click/Hover Behaviour
   * emulates hover and active states, forwards click event to link_selector
   *
   * link_selector: String - jQuery selector for target link
   * button_selector: String - jQuery selector for elements that disable hover/click effect on parent
   *
   * TODO perhaps make accessible globally?
   * enable rebinding or live binding
   */
  $.fn.dtag_rowevents = function (link_selector, button_selector) {
    var $row = this;
    var $links = $row.find(link_selector);
    button_selector = button_selector || 'button, .button';

    $row.attr('title', function () {
      // set title to target link's title if none is already set
      return !$(this).attr('title') ? $links.first().attr('title') : $(this).attr('title');
    })
      .on('mouseenter', function (){
        $row.addClass('hover');
      }).on('mouseleave', function (){
        $row.removeClass('hover').removeClass('click');
      }).on('mouseenter', button_selector, function () {
        $row.removeClass('hover').removeClass('click');
      }).on('mouseleave', button_selector, function () {
        $row.addClass('hover');
      }).on('mousedown', function (ev) {
        if ($(ev.target).parents(button_selector).length === 0) {
          $row.addClass('click');
        }
      }).on('mouseup', function (ev) {
        if ($(ev.target).parents(button_selector).length === 0) {
          $row.removeClass('click');
        }
      }).on('click', function (ev) {
        if($links.length && !$(ev.target).is('a')) {
          // trigger click on target link

          // TODO resolve conflict with row_events function
          // @see components/scripts
          //if ($links.length) {
          //  $links[0].click();
          //}
          // workaround:
          window.location = $links.prop('href');
        }
      });

    return this;
  };

  $.dtag_rowevents = function (config) {

    var cfg = $.extend({}, $.dtag_rowevents.settings, config);

    // Tables
    $(cfg.table_selector).find(cfg.table_row_selector).each(function () {
      $(this).dtag_rowevents(cfg.table_link_selector);
    });

    // Lists
    $(cfg.list_selector).find(cfg.list_row_selector).each(function () {
      $(this).dtag_rowevents(cfg.list_link_selector);
    });

    /**
     * Temporary clipboard event binding function
     * TODO refactor, rewrite, find solutions
     */
    $(cfg.clipboard_selector).on('click', function (event){
      event.preventDefault();
    });
  };

  $.dtag_rowevents.settings = {
    table_selector: '.DTExperience table tbody',
    table_row_selector: 'tr:has(a.tr-title)',
    table_link_selector: 'a.tr-title',
    list_selector: '.DTExperience ul:not(:has(ul))',
    list_row_selector: 'li:has(a)',
    list_link_selector: 'a:first',
    clipboard_selector: '.DTExperience a.clipboard-link'
  };


}));

/**
 * Initialize jquery.dtag_rowevents
 */
define('components/rowevents', ['jquery', 'libs/jquery/jquery.dtag_rowevents'], function($) {

  $(function () {
    // initialize plugin
    $.dtag_rowevents({
      list_selector: 'ul:not(:has(ul)):not(.tree)',
      clipboard_selector: '#dtag_content a.clipboard-link'
    });
  });

});

/*! jQuery Validation Plugin - v1.10.0 - 9/7/2012
* https://github.com/jzaefferer/jquery-validation
* Copyright (c) 2012 Jörn Zaefferer; Licensed MIT, GPL */

(function($) {

$.extend($.fn, {
	// http://docs.jquery.com/Plugins/Validation/validate
	validate: function( options ) {

		// if nothing is selected, return nothing; can't chain anyway
		if (!this.length) {
			if (options && options.debug && window.console) {
				console.warn( "nothing selected, can't validate, returning nothing" );
			}
			return;
		}

		// check if a validator for this form was already created
		var validator = $.data(this[0], 'validator');
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr('novalidate', 'novalidate');

		validator = new $.validator( options, this[0] );
		$.data(this[0], 'validator', validator);

		if ( validator.settings.onsubmit ) {

			this.validateDelegate( ":submit", "click", function(ev) {
				if ( validator.settings.submitHandler ) {
					validator.submitButton = ev.target;
				}
				// allow suppressing validation by adding a cancel class to the submit button
				if ( $(ev.target).hasClass('cancel') ) {
					validator.cancelSubmit = true;
				}
			});

			// validate the form on submit
			this.submit( function( event ) {
				if ( validator.settings.debug ) {
					// prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle() {
					var hidden;
					if ( validator.settings.submitHandler ) {
						if (validator.submitButton) {
							// insert a hidden input as a replacement for the missing submit button
							hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
						}
						validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if (validator.submitButton) {
							// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						return false;
					}
					return true;
				}

				// prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			});
		}

		return validator;
	},
	// http://docs.jquery.com/Plugins/Validation/valid
	valid: function() {
		if ( $(this[0]).is('form')) {
			return this.validate().form();
		} else {
			var valid = true;
			var validator = $(this[0].form).validate();
			this.each(function() {
				valid &= validator.element(this);
			});
			return valid;
		}
	},
	// attributes: space seperated list of attributes to retrieve and remove
	removeAttrs: function(attributes) {
		var result = {},
			$element = this;
		$.each(attributes.split(/\s/), function(index, value) {
			result[value] = $element.attr(value);
			$element.removeAttr(value);
		});
		return result;
	},
	// http://docs.jquery.com/Plugins/Validation/rules
	rules: function(command, argument) {
		var element = this[0];

		if (command) {
			var settings = $.data(element.form, 'validator').settings;
			var staticRules = settings.rules;
			var existingRules = $.validator.staticRules(element);
			switch(command) {
			case "add":
				$.extend(existingRules, $.validator.normalizeRule(argument));
				staticRules[element.name] = existingRules;
				if (argument.messages) {
					settings.messages[element.name] = $.extend( settings.messages[element.name], argument.messages );
				}
				break;
			case "remove":
				if (!argument) {
					delete staticRules[element.name];
					return existingRules;
				}
				var filtered = {};
				$.each(argument.split(/\s/), function(index, method) {
					filtered[method] = existingRules[method];
					delete existingRules[method];
				});
				return filtered;
			}
		}

		var data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.metadataRules(element),
			$.validator.classRules(element),
			$.validator.attributeRules(element),
			$.validator.staticRules(element)
		), element);

		// make sure required is at front
		if (data.required) {
			var param = data.required;
			delete data.required;
			data = $.extend({required: param}, data);
		}

		return data;
	}
});

// Custom selectors
$.extend($.expr[":"], {
	// http://docs.jquery.com/Plugins/Validation/blank
	blank: function(a) {return !$.trim("" + a.value);},
	// http://docs.jquery.com/Plugins/Validation/filled
	filled: function(a) {return !!$.trim("" + a.value);},
	// http://docs.jquery.com/Plugins/Validation/unchecked
	unchecked: function(a) {return !a.checked;}
});

// constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

$.validator.format = function(source, params) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray(arguments);
			args.unshift(source);
			return $.validator.format.apply( this, args );
		};
	}
	if ( arguments.length > 2 && params.constructor !== Array  ) {
		params = $.makeArray(arguments).slice(1);
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each(params, function(i, n) {
		source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
	});
	return source;
};

$.extend($.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		validClass: "valid",
		errorElement: "label",
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function(element, event) {
			this.lastActive = element;

			// hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup && !this.blockFocusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.addWrapper(this.errorsFor(element)).hide();
			}
		},
		onfocusout: function(element, event) {
			if ( !this.checkable(element) && (element.name in this.submitted || !this.optional(element)) ) {
				this.element(element);
			}
		},
		onkeyup: function(element, event) {
			if ( event.which === 9 && this.elementValue(element) === '' ) {
				return;
			} else if ( element.name in this.submitted || element === this.lastActive ) {
				this.element(element);
			}
		},
		onclick: function(element, event) {
			// click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element(element);
			}
			// or option elements, check parent select in that case
			else if (element.parentNode.name in this.submitted) {
				this.element(element.parentNode);
			}
		},
		highlight: function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).addClass(errorClass).removeClass(validClass);
			} else {
				$(element).addClass(errorClass).removeClass(validClass);
			}
		},
		unhighlight: function(element, errorClass, validClass) {
			if (element.type === 'radio') {
				this.findByName(element.name).removeClass(errorClass).addClass(validClass);
			} else {
				$(element).removeClass(errorClass).addClass(validClass);
			}
		}
	},

	// http://docs.jquery.com/Plugins/Validation/Validator/setDefaults
	setDefaults: function(settings) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date (ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		creditcard: "Please enter a valid credit card number.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format("Please enter no more than {0} characters."),
		minlength: $.validator.format("Please enter at least {0} characters."),
		rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
		range: $.validator.format("Please enter a value between {0} and {1}."),
		max: $.validator.format("Please enter a value less than or equal to {0}."),
		min: $.validator.format("Please enter a value greater than or equal to {0}.")
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $(this.settings.errorLabelContainer);
			this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
			this.containers = $(this.settings.errorContainer).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = (this.groups = {});
			$.each(this.settings.groups, function(key, value) {
				$.each(value.split(/\s/), function(index, name) {
					groups[name] = key;
				});
			});
			var rules = this.settings.rules;
			$.each(rules, function(key, value) {
				rules[key] = $.validator.normalizeRule(value);
			});

			function delegate(event) {
				var validator = $.data(this[0].form, "validator"),
					eventType = "on" + event.type.replace(/^validate/, "");
				if (validator.settings[eventType]) {
					validator.settings[eventType].call(validator, this[0], event);
				}
			}
			$(this.currentForm)
				.validateDelegate(":text, [type='password'], [type='file'], select, textarea, " +
					"[type='number'], [type='search'] ,[type='tel'], [type='url'], " +
					"[type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], " +
					"[type='range'], [type='color'] ",
					"focusin focusout keyup", delegate)
				.validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", delegate);

			if (this.settings.invalidHandler) {
				$(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
			}
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/form
		form: function() {
			this.checkForm();
			$.extend(this.submitted, this.errorMap);
			this.invalid = $.extend({}, this.errorMap);
			if (!this.valid()) {
				$(this.currentForm).triggerHandler("invalid-form", [this]);
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++ ) {
				this.check( elements[i] );
			}
			return this.valid();
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/element
		element: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );
			this.lastElement = element;
			this.prepareElement( element );
			this.currentElements = $(element);
			var result = this.check( element ) !== false;
			if (result) {
				delete this.invalid[element.name];
			} else {
				this.invalid[element.name] = true;
			}
			if ( !this.numberOfInvalids() ) {
				// Hide error containers on last error
				this.toHide = this.toHide.add( this.containers );
			}
			this.showErrors();
			return result;
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/showErrors
		showErrors: function(errors) {
			if(errors) {
				// add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = [];
				for ( var name in errors ) {
					this.errorList.push({
						message: errors[name],
						element: this.findByName(name)[0]
					});
				}
				// remove items from success list
				this.successList = $.grep( this.successList, function(element) {
					return !(element.name in errors);
				});
			}
			if (this.settings.showErrors) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// http://docs.jquery.com/Plugins/Validation/Validator/resetForm
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$( this.currentForm ).resetForm();
			}
			this.submitted = {};
			this.lastElement = null;
			this.prepareForm();
			this.hideErrors();
			this.elements().removeClass( this.settings.errorClass ).removeData( "previousValue" );
		},

		numberOfInvalids: function() {
			return this.objectLength(this.invalid);
		},

		objectLength: function( obj ) {
			var count = 0;
			for ( var i in obj ) {
				count++;
			}
			return count;
		},

		hideErrors: function() {
			this.addWrapper( this.toHide ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if( this.settings.focusInvalid ) {
				try {
					$(this.findLastActive() || this.errorList.length && this.errorList[0].element || [])
					.filter(":visible")
					.focus()
					// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger("focusin");
				} catch(e) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep(this.errorList, function(n) {
				return n.element.name === lastActive.name;
			}).length === 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// select all valid inputs inside the form (no submit or reset buttons)
			return $(this.currentForm)
			.find("input, select, textarea")
			.not(":submit, :reset, :image, [disabled]")
			.not( this.settings.ignore )
			.filter(function() {
				if ( !this.name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this);
				}

				// select only the first element for each name, and only those with rules specified
				if ( this.name in rulesCache || !validator.objectLength($(this).rules()) ) {
					return false;
				}

				rulesCache[this.name] = true;
				return true;
			});
		},

		clean: function( selector ) {
			return $( selector )[0];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.replace(' ', '.');
			return $( this.settings.errorElement + "." + errorClass, this.errorContext );
		},

		reset: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $([]);
			this.toHide = $([]);
			this.currentElements = $([]);
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor(element);
		},

		elementValue: function( element ) {
			var type = $(element).attr('type'),
				val = $(element).val();

			if ( type === 'radio' || type === 'checkbox' ) {
				return $('input[name="' + $(element).attr('name') + '"]:checked').val();
			}

			if ( typeof val === 'string' ) {
				return val.replace(/\r/g, "");
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $(element).rules();
			var dependencyMismatch = false;
			var val = this.elementValue(element);
			var result;

			for (var method in rules ) {
				var rule = { method: method, parameters: rules[method] };
				try {

					result = $.validator.methods[method].call( this, val, element, rule.parameters );

					// if a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor(element) );
						return;
					}

					if( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch(e) {
					if ( this.settings.debug && window.console ) {
						console.log("exception occured when checking element " + element.id + ", check the '" + rule.method + "' method", e);
					}
					throw e;
				}
			}
			if (dependencyMismatch) {
				return;
			}
			if ( this.objectLength(rules) ) {
				this.successList.push(element);
			}
			return true;
		},

		// return the custom message for the given element and validation method
		// specified in the element's "messages" metadata
		customMetaMessage: function(element, method) {
			if (!$.metadata) {
				return;
			}
			var meta = this.settings.meta ? $(element).metadata()[this.settings.meta] : $(element).metadata();
			return meta && meta.messages && meta.messages[method];
		},

		// return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		customDataMessage: function(element, method) {
			return $(element).data('msg-' + method.toLowerCase()) || (element.attributes && $(element).attr('data-msg-' + method.toLowerCase()));
		},

		// return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[name];
			return m && (m.constructor === String ? m : m[method]);
		},

		// return the first defined argument, allowing empty strings
		findDefined: function() {
			for(var i = 0; i < arguments.length; i++) {
				if (arguments[i] !== undefined) {
					return arguments[i];
				}
			}
			return undefined;
		},

		defaultMessage: function( element, method) {
			return this.findDefined(
				this.customMessage( element.name, method ),
				this.customDataMessage( element, method ),
				this.customMetaMessage( element, method ),
				// title is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined,
				$.validator.messages[method],
				"<strong>Warning: No message defined for " + element.name + "</strong>"
			);
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule.method ),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call(this, rule.parameters, element);
			} else if (theregex.test(message)) {
				message = $.validator.format(message.replace(theregex, '{$1}'), rule.parameters);
			}
			this.errorList.push({
				message: message,
				element: element
			});

			this.errorMap[element.name] = message;
			this.submitted[element.name] = message;
		},

		addWrapper: function(toToggle) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements;
			for ( i = 0; this.errorList[i]; i++ ) {
				var error = this.errorList[i];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if (this.settings.success) {
				for ( i = 0; this.successList[i]; i++ ) {
					this.showLabel( this.successList[i] );
				}
			}
			if (this.settings.unhighlight) {
				for ( i = 0, elements = this.validElements(); elements[i]; i++ ) {
					this.settings.unhighlight.call( this, elements[i], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not(this.invalidElements());
		},

		invalidElements: function() {
			return $(this.errorList).map(function() {
				return this.element;
			});
		},

		showLabel: function(element, message) {
			var label = this.errorsFor( element );
			if ( label.length ) {
				// refresh error/success class
				label.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );

				// check if we have a generated label, replace the message then
				if ( label.attr("generated") ) {
					label.html(message);
				}
			} else {
				// create label
				label = $("<" + this.settings.errorElement + "/>")
					.attr({"for":  this.idOrName(element), generated: true})
					.addClass(this.settings.errorClass)
					.html(message || "");
				if ( this.settings.wrapper ) {
					// make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					label = label.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
				}
				if ( !this.labelContainer.append(label).length ) {
					if ( this.settings.errorPlacement ) {
						this.settings.errorPlacement(label, $(element) );
					} else {
					label.insertAfter(element);
					}
				}
			}
			if ( !message && this.settings.success ) {
				label.text("");
				if ( typeof this.settings.success === "string" ) {
					label.addClass( this.settings.success );
				} else {
					this.settings.success( label, element );
				}
			}
			this.toShow = this.toShow.add(label);
		},

		errorsFor: function(element) {
			var name = this.idOrName(element);
			return this.errors().filter(function() {
				return $(this).attr('for') === name;
			});
		},

		idOrName: function(element) {
			return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
		},

		validationTargetFor: function(element) {
			// if radio/checkbox, validate first element in group instead
			if (this.checkable(element)) {
				element = this.findByName( element.name ).not(this.settings.ignore)[0];
			}
			return element;
		},

		checkable: function( element ) {
			return (/radio|checkbox/i).test(element.type);
		},

		findByName: function( name ) {
			return $(this.currentForm).find('[name="' + name + '"]');
		},

		getLength: function(value, element) {
			switch( element.nodeName.toLowerCase() ) {
			case 'select':
				return $("option:selected", element).length;
			case 'input':
				if( this.checkable( element) ) {
					return this.findByName(element.name).filter(':checked').length;
				}
			}
			return value.length;
		},

		depend: function(param, element) {
			return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
		},

		dependTypes: {
			"boolean": function(param, element) {
				return param;
			},
			"string": function(param, element) {
				return !!$(param, element.form).length;
			},
			"function": function(param, element) {
				return param(element);
			}
		},

		optional: function(element) {
			var val = this.elementValue(element);
			return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
		},

		startRequest: function(element) {
			if (!this.pending[element.name]) {
				this.pendingRequest++;
				this.pending[element.name] = true;
			}
		},

		stopRequest: function(element, valid) {
			this.pendingRequest--;
			// sometimes synchronization fails, make sure pendingRequest is never < 0
			if (this.pendingRequest < 0) {
				this.pendingRequest = 0;
			}
			delete this.pending[element.name];
			if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
				$(this.currentForm).submit();
				this.formSubmitted = false;
			} else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
				$(this.currentForm).triggerHandler("invalid-form", [this]);
				this.formSubmitted = false;
			}
		},

		previousValue: function(element) {
			return $.data(element, "previousValue") || $.data(element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, "remote" )
			});
		}

	},

	classRuleSettings: {
		required: {required: true},
		email: {email: true},
		url: {url: true},
		date: {date: true},
		dateISO: {dateISO: true},
		number: {number: true},
		digits: {digits: true},
		creditcard: {creditcard: true}
	},

	addClassRules: function(className, rules) {
		if ( className.constructor === String ) {
			this.classRuleSettings[className] = rules;
		} else {
			$.extend(this.classRuleSettings, className);
		}
	},

	classRules: function(element) {
		var rules = {};
		var classes = $(element).attr('class');
		if ( classes ) {
			$.each(classes.split(' '), function() {
				if (this in $.validator.classRuleSettings) {
					$.extend(rules, $.validator.classRuleSettings[this]);
				}
			});
		}
		return rules;
	},

	attributeRules: function(element) {
		var rules = {};
		var $element = $(element);

		for (var method in $.validator.methods) {
			var value;

			// support for <input required> in both html5 and older browsers
			if (method === 'required') {
				value = $element.get(0).getAttribute(method);
				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if (value === "") {
					value = true;
				}
				// force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr(method);
			}

			if (value) {
				rules[method] = value;
			} else if ($element[0].getAttribute("type") === method) {
				rules[method] = true;
			}
		}

		// maxlength may be returned as -1, 2147483647 (IE) and 524288 (safari) for text inputs
		if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
			delete rules.maxlength;
		}

		return rules;
	},

	metadataRules: function(element) {
		if (!$.metadata) {
			return {};
		}

		var meta = $.data(element.form, 'validator').settings.meta;
		return meta ?
			$(element).metadata()[meta] :
			$(element).metadata();
	},

	staticRules: function(element) {
		var rules = {};
		var validator = $.data(element.form, 'validator');
		if (validator.settings.rules) {
			rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
		}
		return rules;
	},

	normalizeRules: function(rules, element) {
		// handle dependency check
		$.each(rules, function(prop, val) {
			// ignore rule when param is explicitly false, eg. required:false
			if (val === false) {
				delete rules[prop];
				return;
			}
			if (val.param || val.depends) {
				var keepRule = true;
				switch (typeof val.depends) {
					case "string":
						keepRule = !!$(val.depends, element.form).length;
						break;
					case "function":
						keepRule = val.depends.call(element, element);
						break;
				}
				if (keepRule) {
					rules[prop] = val.param !== undefined ? val.param : true;
				} else {
					delete rules[prop];
				}
			}
		});

		// evaluate parameters
		$.each(rules, function(rule, parameter) {
			rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
		});

		// clean number parameters
		$.each(['minlength', 'maxlength', 'min', 'max'], function() {
			if (rules[this]) {
				rules[this] = Number(rules[this]);
			}
		});
		$.each(['rangelength', 'range'], function() {
			if (rules[this]) {
				rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
			}
		});

		if ($.validator.autoCreateRanges) {
			// auto-create ranges
			if (rules.min && rules.max) {
				rules.range = [rules.min, rules.max];
				delete rules.min;
				delete rules.max;
			}
			if (rules.minlength && rules.maxlength) {
				rules.rangelength = [rules.minlength, rules.maxlength];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		// To support custom messages in metadata ignore rule methods titled "messages"
		if (rules.messages) {
			delete rules.messages;
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function(data) {
		if( typeof data === "string" ) {
			var transformed = {};
			$.each(data.split(/\s/), function() {
				transformed[this] = true;
			});
			data = transformed;
		}
		return data;
	},

	// http://docs.jquery.com/Plugins/Validation/Validator/addMethod
	addMethod: function(name, method, message) {
		$.validator.methods[name] = method;
		$.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];
		if (method.length < 3) {
			$.validator.addClassRules(name, $.validator.normalizeRule(name));
		}
	},

	methods: {

		// http://docs.jquery.com/Plugins/Validation/Methods/required
		required: function(value, element, param) {
			// check if dependency is met
			if ( !this.depend(param, element) ) {
				return "dependency-mismatch";
			}
			if ( element.nodeName.toLowerCase() === "select" ) {
				// could be an array for select-multiple or a string, both are fine this way
				var val = $(element).val();
				return val && val.length > 0;
			}
			if ( this.checkable(element) ) {
				return this.getLength(value, element) > 0;
			}
			return $.trim(value).length > 0;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/remote
		remote: function(value, element, param) {
			if ( this.optional(element) ) {
				return "dependency-mismatch";
			}

			var previous = this.previousValue(element);
			if (!this.settings.messages[element.name] ) {
				this.settings.messages[element.name] = {};
			}
			previous.originalMessage = this.settings.messages[element.name].remote;
			this.settings.messages[element.name].remote = previous.message;

			param = typeof param === "string" && {url:param} || param;

			if ( this.pending[element.name] ) {
				return "pending";
			}
			if ( previous.old === value ) {
				return previous.valid;
			}

			previous.old = value;
			var validator = this;
			this.startRequest(element);
			var data = {};
			data[element.name] = value;
			$.ajax($.extend(true, {
				url: param,
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				success: function(response) {
					validator.settings.messages[element.name].remote = previous.originalMessage;
					var valid = response === true || response === "true";
					if ( valid ) {
						var submitted = validator.formSubmitted;
						validator.prepareElement(element);
						validator.formSubmitted = submitted;
						validator.successList.push(element);
						delete validator.invalid[element.name];
						validator.showErrors();
					} else {
						var errors = {};
						var message = response || validator.defaultMessage( element, "remote" );
						errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
						validator.invalid[element.name] = true;
						validator.showErrors(errors);
					}
					previous.valid = valid;
					validator.stopRequest(element, valid);
				}
			}, param));
			return "pending";
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/minlength
		minlength: function(value, element, param) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || length >= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/maxlength
		maxlength: function(value, element, param) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || length <= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/rangelength
		rangelength: function(value, element, param) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || ( length >= param[0] && length <= param[1] );
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/min
		min: function( value, element, param ) {
			return this.optional(element) || value >= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/max
		max: function( value, element, param ) {
			return this.optional(element) || value <= param;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/range
		range: function( value, element, param ) {
			return this.optional(element) || ( value >= param[0] && value <= param[1] );
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/email
		email: function(value, element) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
			return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/url
		url: function(value, element) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
			return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/date
		date: function(value, element) {
			return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/dateISO
		dateISO: function(value, element) {
			return this.optional(element) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/number
		number: function(value, element) {
			return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/digits
		digits: function(value, element) {
			return this.optional(element) || /^\d+$/.test(value);
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/creditcard
		// based on http://en.wikipedia.org/wiki/Luhn
		creditcard: function(value, element) {
			if ( this.optional(element) ) {
				return "dependency-mismatch";
			}
			// accept only spaces, digits and dashes
			if (/[^0-9 \-]+/.test(value)) {
				return false;
			}
			var nCheck = 0,
				nDigit = 0,
				bEven = false;

			value = value.replace(/\D/g, "");

			for (var n = value.length - 1; n >= 0; n--) {
				var cDigit = value.charAt(n);
				nDigit = parseInt(cDigit, 10);
				if (bEven) {
					if ((nDigit *= 2) > 9) {
						nDigit -= 9;
					}
				}
				nCheck += nDigit;
				bEven = !bEven;
			}

			return (nCheck % 10) === 0;
		},

		// http://docs.jquery.com/Plugins/Validation/Methods/equalTo
		equalTo: function(value, element, param) {
			// bind to the blur event of the target in order to revalidate whenever the target field is updated
			// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
			var target = $(param);
			if (this.settings.onfocusout) {
				target.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
					$(element).valid();
				});
			}
			return value === target.val();
		}

	}

});

// deprecated, use $.validator.format instead
$.format = $.validator.format;

}(jQuery));

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
(function($) {
	var pendingRequests = {};
	// Use a prefilter if available (1.5+)
	if ( $.ajaxPrefilter ) {
		$.ajaxPrefilter(function(settings, _, xhr) {
			var port = settings.port;
			if (settings.mode === "abort") {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = xhr;
			}
		});
	} else {
		// Proxy ajax
		var ajax = $.ajax;
		$.ajax = function(settings) {
			var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
				port = ( "port" in settings ? settings : $.ajaxSettings ).port;
			if (mode === "abort") {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				return (pendingRequests[port] = ajax.apply(this, arguments));
			}
			return ajax.apply(this, arguments);
		};
	}
}(jQuery));

// provides cross-browser focusin and focusout events
// IE has native support, in other browsers, use event caputuring (neither bubbles)

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target
(function($) {
	// only implement if not provided by jQuery core (since 1.4)
	// TODO verify if jQuery 1.4's implementation is compatible with older jQuery special-event APIs
	if (!jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener) {
		$.each({
			focus: 'focusin',
			blur: 'focusout'
		}, function( original, fix ){
			$.event.special[fix] = {
				setup:function() {
					this.addEventListener( original, handler, true );
				},
				teardown:function() {
					this.removeEventListener( original, handler, true );
				},
				handler: function(e) {
					var args = arguments;
					args[0] = $.event.fix(e);
					args[0].type = fix;
					return $.event.handle.apply(this, args);
				}
			};
			function handler(e) {
				e = $.event.fix(e);
				e.type = fix;
				return $.event.handle.call(this, e);
			}
		});
	}
	$.extend($.fn, {
		validateDelegate: function(delegate, type, handler) {
			return this.bind(type, function(event) {
				var target = $(event.target);
				if (target.is(delegate)) {
					return handler.apply(target, arguments);
				}
			});
		}
	});
}(jQuery));

define("libs/jquery/jquery.validate", function(){});

/*! DTAG Form Validator - v0.1.0 - 2012-12-12
* Copyright (c) 2012 Jonas Ulrich | ruhmesmeile; Licensed MIT */
/*
 * jquery.dtag_validate
 *
 * Copyright (c) 2012 Jonas Ulrich | ruhmesmeile
 *                    refactored by Aki Alexandra Nofftz
 * Licensed under the MIT license.
 */

// use AMD if present
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define('libs/jquery/jquery.dtag_validate',['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

  // attach a tooltip message to an element
  function attachMessage($element, message, show) {
  
    // if message empty, remove tooltip, else attach
    if (message === undefined || message === '' || message.length === 0) {
      $element.qtip('destroy').attr('title', '');
    } else {

      // get text if no string
      if (typeof message !== 'string') {
        message = $(message).text();
      }

      // attach message
      $element.attr('title', message);
      
      // initialize tooltip
      $element.dtag_tooltip();

      // optionally show tooltip
      if (show) {
        $element.qtip('show');
      }
    }
  }

  // sets a tooltip for submit button
  function submitButtonMessage(element, message) {
    $(element)

      // search submit button(s)
      .closest('form')
      .find($.fn.dtag_validate.settings.submitSelector)
    
      // attach or remove tooltips
      .each(function() {
        attachMessage($(this), message, false);
      });
  }

  // redefine errorPlacement
  function errorPlacement(error, element) {

    // Set positioning based on the elements position in the form
    var $elem = $(element);

    // Check we have a valid error message
    if(!error.is(':empty')) {
      // Apply the tooltip only if it isn't valid
      if (!$elem.hasClass('valid')) {
        attachMessage($elem, error, true);
      }
    }
    // If the error is empty, remove the qTip
    else {
      attachMessage($elem, '', false);
    }
  }
  
  // redefine showErrors
  function showErrors(errorMap, errorList) {
  
    // prevent linting errors
    errorList = errorList;
  
    // attach first error message to submit button(s)
    if (errorMap.length > 0) {
      submitButtonMessage($(this), errorMap[0].message);
    } else {
      submitButtonMessage($(this), '');
    }

    // call default display method
    this.defaultShowErrors();
  }

  // attach validator
  $.fn.dtag_validate = function (options) {

    // Merge options into defaults
    $.fn.dtag_validate.settings =
      $.extend($.fn.dtag_validate.defaults, options);

    // attach validator
    return this.validate($.fn.dtag_validate.settings);
  };
  
  $.fn.dtag_validate.defaults = {
    submitButtonSelector: 'input[type=submit]',
    errorClass: 'validate-negative',
    showErrors: showErrors,
    errorPlacement: errorPlacement,
    success: $.noop // Odd workaround for errorPlacement not firing!
  };

}));

/**
 * Initialize jquery.dtag_validate
 */

// TODO make dependency management consistent

define('components/validate', ['jquery', 'libs/jquery/jquery.validate', 'libs/jquery/jquery.dtag_validate'], function ($) {

  $(function () {
    // initialize plugin using defaults
    $('.DTExperience form.validate').dtag_validate();
  });

});
/*! DTAG FormReplace - v0.1.0 - 2012-12-12
* Copyright (c) 2012 Jonas Ulrich | ruhmesmeile; Licensed MIT */
/*
 * jquery.dtag_replaceForms
 *
 *
 * Copyright (c) 2012 Jonas Ulrich | ruhmesmeile
 * Licensed under the MIT license.
 */

// use AMD if present
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define('libs/jquery/jquery.dtag_replaceForms',['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

  $.fn.formReplace =
    function (options) {
      // Merge options into defaults
      $.fn.formReplace.opts = $.extend({}, $.fn.formReplace.defaults, options);

      // Iterate through form elements
      return this.each(function (index , formElement) {
        index = index; // do something with `index` due linting errors

        var $replacementElement = $($.fn.formReplace.opts.markup),
            $formElement = $(formElement);

        // Move original form element out of viewport
        $(formElement).addClass('replaced-form-element')
          .css({
            'position': 'absolute',
            'top': '-99999px',
            'left': '-99999px'
          });

        // Iterate over events & proxy them
        $.each(['click'], function (index, type) {
          index = index; // do something with `index` due linting errors

          $replacementElement.on(type, function (event) {
            event.preventDefault();
            event.stopPropagation();

            if($(this).parent().hasClass('unavailable')) { return; }

            var $targetElement = $formElement;
            $targetElement.trigger($.Event(event));
            $targetElement.blur();
          });
        });

        $.each(['change'], function (index, type) {
          index = index; // do something with `index` due linting errors

          $formElement.on(type, function () {
            var $fE = $(this);
            if($fE.is(':checked')) {
              if($fE.is('input[type=radio]')) {
                $('.DTExperience input[name='+$fE.prop('name')+']').parent().removeClass('checked');
              }
              $fE.parent().addClass('checked');
            } else {
              $fE.parent().removeClass('checked');
            }
          });
        });

        // Insert replacement into DOM
        $formElement.after($replacementElement);
      });
    };

  /* Empty function for form elements that don't have any jQuery event-handlers */
  $.fn.formReplace.emptyFn = function () {};

  /* Plugin defaults */
  $.fn.formReplace.defaults = {
    markup: '<span class="replacement-form-element"></span>',
    handlers: ['change']
  };

}));

// Chosen, a Select Box Enhancer for jQuery and Protoype
// by Patrick Filler for Harvest, http://getharvest.com
// 
// Version 0.9.8
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function() {
  var SelectParser;

  SelectParser = (function() {

    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: group.label,
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) this.parsed[group_position].children += 1;
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  this.SelectParser = SelectParser;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/

(function() {
  var AbstractChosen, root;

  root = this;

  AbstractChosen = (function() {

    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      this.set_default_values();
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.finish_setup();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.search_contains = this.options.search_contains || false;
      this.choices = 0;
      this.single_backstroke_delete = this.options.single_backstroke_delete || false;
      return this.max_selected_options = this.options.max_selected_options || Infinity;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || "Select Some Options";
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || "Select an Option";
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || "No results match";
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (!this.active_field) {
        return setTimeout((function() {
          return _this.container_mousedown();
        }), 50);
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, style;
      if (!option.disabled) {
        option.dom_id = this.container_id + "_o_" + option.array_index;
        classes = option.selected && this.is_multiple ? [] : ["active-result"];
        if (option.selected) classes.push("result-selected");
        if (option.group_array_index != null) classes.push("group-option");
        if (option.classes !== "") classes.push(option.classes);
        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
      } else {
        return "";
      }
    };

    AbstractChosen.prototype.results_update_field = function() {
      if (!this.is_multiple) this.results_reset_cleanup();
      this.result_clear_highlight();
      this.result_single_selected = null;
      return this.results_build();
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) return this.result_select(evt);
          break;
        case 27:
          if (this.results_showing) this.results_hide();
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.generate_field_id = function() {
      var new_id;
      new_id = this.generate_random_id();
      this.form_field.id = new_id;
      return new_id;
    };

    AbstractChosen.prototype.generate_random_char = function() {
      var chars, newchar, rand;
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      rand = Math.floor(Math.random() * chars.length);
      return newchar = chars.substring(rand, rand + 1);
    };

    return AbstractChosen;

  })();

  root.AbstractChosen = AbstractChosen;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/

(function() {
  var $, Chosen, get_side_border_padding, root,
    __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  root = this;

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      if ($.browser.msie && ($.browser.version === "6.0" || $.browser.version === "7.0")) {
        return this;
      }
      return this.each(function(input_field) {
        var $this;
        $this = $(this);
        if (!$this.hasClass("chzn-done")) {
          return $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(_super) {

    __extends(Chosen, _super);

    function Chosen() {
      Chosen.__super__.constructor.apply(this, arguments);
    }

    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      this.current_value = this.form_field_jq.val();
      return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
    };

    Chosen.prototype.finish_setup = function() {
      return this.form_field_jq.addClass("chzn-done");
    };

    Chosen.prototype.set_up_html = function() {
      var container_div, dd_top, dd_width, sf_width;
      this.container_id = this.form_field.id.length ? this.form_field.id.replace(/[^\w]/g, '_') : this.generate_field_id();
      this.container_id += "_chzn";
      this.f_width = this.form_field_jq.outerWidth();
      container_div = $("<div />", {
        id: this.container_id,
        "class": "chzn-container" + (this.is_rtl ? ' chzn-rtl' : ''),
        style: 'width: ' + this.f_width + 'px;'
      });
      if (this.is_multiple) {
        container_div.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop" style="left:-9000px;"><ul class="chzn-results"></ul></div>');
      } else {
        container_div.html('<a href="javascript:void(0)" class="chzn-single chzn-default"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop" style="left:-9000px;"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
      }
      this.form_field_jq.hide().after(container_div);
      this.container = $('#' + this.container_id);
      this.container.addClass("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      this.dropdown = this.container.find('div.chzn-drop').first();
      dd_top = this.container.height();
      dd_width = this.f_width - get_side_border_padding(this.dropdown);
      this.dropdown.css({
        "width": dd_width + "px",
        "top": dd_top + "px"
      });
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chzn-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chzn-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chzn-search').first();
        this.selected_item = this.container.find('.chzn-single').first();
        sf_width = dd_width - get_side_border_padding(this.search_container) - get_side_border_padding(this.search_field);
        this.search_field.css({
          "width": sf_width + "px"
        });
      }
      this.results_build();
      this.set_tab_index();
      return this.form_field_jq.trigger("liszt:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.mousedown(function(evt) {
        return _this.container_mousedown(evt);
      });
      this.container.mouseup(function(evt) {
        return _this.container_mouseup(evt);
      });
      this.container.mouseenter(function(evt) {
        return _this.mouse_enter(evt);
      });
      this.container.mouseleave(function(evt) {
        return _this.mouse_leave(evt);
      });
      this.search_results.mouseup(function(evt) {
        return _this.search_results_mouseup(evt);
      });
      this.search_results.mouseover(function(evt) {
        return _this.search_results_mouseover(evt);
      });
      this.search_results.mouseout(function(evt) {
        return _this.search_results_mouseout(evt);
      });
      this.form_field_jq.bind("liszt:updated", function(evt) {
        return _this.results_update_field(evt);
      });
      this.search_field.blur(function(evt) {
        return _this.input_blur(evt);
      });
      this.search_field.keyup(function(evt) {
        return _this.keyup_checker(evt);
      });
      this.search_field.keydown(function(evt) {
        return _this.keydown_checker(evt);
      });
      if (this.is_multiple) {
        this.search_choices.click(function(evt) {
          return _this.choices_click(evt);
        });
        return this.search_field.focus(function(evt) {
          return _this.input_focus(evt);
        });
      } else {
        return this.container.click(function(evt) {
          return evt.preventDefault();
        });
      }
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass('chzn-disabled');
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass('chzn-disabled');
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      var target_closelink;
      if (!this.is_disabled) {
        target_closelink = evt != null ? ($(evt.target)).hasClass("search-choice-close") : false;
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.stopPropagation();
        }
        if (!this.pending_destroy_click && !target_closelink) {
          if (!this.active_field) {
            if (this.is_multiple) this.search_field.val("");
            $(document).click(this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chzn-single").length)) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        } else {
          return this.pending_destroy_click = false;
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chzn-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      $(document).unbind("click", this.click_test_action);
      if (!this.is_multiple) {
        this.selected_item.attr("tabindex", this.search_field.attr("tabindex"));
        this.search_field.attr("tabindex", -1);
      }
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chzn-container-active");
      this.winnow_results_clear();
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      if (!this.is_multiple && !this.active_field) {
        this.search_field.attr("tabindex", this.selected_item.attr("tabindex"));
        this.selected_item.attr("tabindex", -1);
      }
      this.container.addClass("chzn-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      if ($(evt.target).parents('#' + this.container_id).length) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      var content, data, _i, _len, _ref;
      this.parsing = true;
      this.results_data = root.SelectParser.select_to_array(this.form_field);
      if (this.is_multiple && this.choices > 0) {
        this.search_choices.find("li.search-choice").remove();
        this.choices = 0;
      } else if (!this.is_multiple) {
        this.selected_item.addClass("chzn-default").find("span").text(this.default_text);
        if (this.form_field.options.length <= this.disable_search_threshold) {
          this.container.addClass("chzn-container-single-nosearch");
        } else {
          this.container.removeClass("chzn-container-single-nosearch");
        }
      }
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content += this.result_add_group(data);
        } else if (!data.empty) {
          content += this.result_add_option(data);
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.selected_item.removeClass("chzn-default").find("span").text(data.text);
            if (this.allow_single_deselect) this.single_deselect_control_build();
          }
        }
      }
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      this.search_results.html(content);
      return this.parsing = false;
    };

    Chosen.prototype.result_add_group = function(group) {
      if (!group.disabled) {
        group.dom_id = this.container_id + "_g_" + group.array_index;
        return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
      } else {
        return "";
      }
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) this.result_highlight.removeClass("highlighted");
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      var dd_top;
      if (!this.is_multiple) {
        this.selected_item.addClass("chzn-single-with-drop");
        if (this.result_single_selected) {
          this.result_do_highlight(this.result_single_selected);
        }
      } else if (this.max_selected_options <= this.choices) {
        this.form_field_jq.trigger("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      dd_top = this.is_multiple ? this.container.height() : this.container.height() - 1;
      this.form_field_jq.trigger("liszt:showing_dropdown", {
        chosen: this
      });
      this.dropdown.css({
        "top": dd_top + "px",
        "left": 0
      });
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      return this.winnow_results();
    };

    Chosen.prototype.results_hide = function() {
      if (!this.is_multiple) {
        this.selected_item.removeClass("chzn-single-with-drop");
      }
      this.result_clear_highlight();
      this.form_field_jq.trigger("liszt:hiding_dropdown", {
        chosen: this
      });
      this.dropdown.css({
        "left": "-9000px"
      });
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field_jq.attr("tabindex")) {
        ti = this.form_field_jq.attr("tabindex");
        this.form_field_jq.attr("tabindex", -1);
        if (this.is_multiple) {
          return this.search_field.attr("tabindex", ti);
        } else {
          this.selected_item.attr("tabindex", ti);
          return this.search_field.attr("tabindex", -1);
        }
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        return this.result_select(evt);
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) return this.result_do_highlight(target);
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (this.active_field && !($(evt.target).hasClass("search-choice" || $(evt.target).parents('.search-choice').first)) && !this.results_showing) {
        return this.results_show();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice_id, link,
        _this = this;
      if (this.is_multiple && this.max_selected_options <= this.choices) {
        this.form_field_jq.trigger("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      choice_id = this.container_id + "_c_" + item.array_index;
      this.choices += 1;
      this.search_container.before('<li class="search-choice" id="' + choice_id + '"><span>' + item.html + '</span><a href="javascript:void(0)" class="search-choice-close" rel="' + item.array_index + '"></a></li>');
      link = $('#' + choice_id).find("a").first();
      return link.click(function(evt) {
        return _this.choice_destroy_link_click(evt);
      });
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      if (!this.is_disabled) {
        this.pending_destroy_click = true;
        return this.choice_destroy($(evt.target));
      } else {
        return evt.stopPropagation;
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      this.choices -= 1;
      this.show_search_field_default();
      if (this.is_multiple && this.choices > 0 && this.search_field.val().length < 1) {
        this.results_hide();
      }
      this.result_deselect(link.attr("rel"));
      return link.parents('li').first().remove();
    };

    Chosen.prototype.results_reset = function() {
      this.form_field.options[0].selected = true;
      this.selected_item.find("span").text(this.default_text);
      if (!this.is_multiple) this.selected_item.addClass("chzn-default");
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) return this.results_hide();
    };

    Chosen.prototype.results_reset_cleanup = function() {
      return this.selected_item.find("abbr").remove();
    };

    Chosen.prototype.result_select = function(evt) {
      var high, high_id, item, position;
      if (this.result_highlight) {
        high = this.result_highlight;
        high_id = high.attr("id");
        this.result_clear_highlight();
        if (this.is_multiple) {
          this.result_deactivate(high);
        } else {
          this.search_results.find(".result-selected").removeClass("result-selected");
          this.result_single_selected = high;
          this.selected_item.removeClass("chzn-default");
        }
        high.addClass("result-selected");
        position = high_id.substr(high_id.lastIndexOf("_") + 1);
        item = this.results_data[position];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.selected_item.find("span").first().text(item.text);
          if (this.allow_single_deselect) this.single_deselect_control_build();
        }
        if (!(evt.metaKey && this.is_multiple)) this.results_hide();
        this.search_field.val("");
        if (this.is_multiple || this.form_field_jq.val() !== this.current_value) {
          this.form_field_jq.trigger("change", {
            'selected': this.form_field.options[item.options_index].value
          });
        }
        this.current_value = this.form_field_jq.val();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.result_activate = function(el) {
      return el.addClass("active-result");
    };

    Chosen.prototype.result_deactivate = function(el) {
      return el.removeClass("active-result");
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result, result_data;
      result_data = this.results_data[pos];
      result_data.selected = false;
      this.form_field.options[result_data.options_index].selected = false;
      result = $("#" + this.container_id + "_o_" + pos);
      result.removeClass("result-selected").addClass("active-result").show();
      this.result_clear_highlight();
      this.winnow_results();
      this.form_field_jq.trigger("change", {
        deselected: this.form_field.options[result_data.options_index].value
      });
      return this.search_field_scale();
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (this.allow_single_deselect && this.selected_item.find("abbr").length < 1) {
        return this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
      }
    };

    Chosen.prototype.winnow_results = function() {
      var found, option, part, parts, regex, regexAnchor, result, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len2, _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.search_field.val() === this.default_text ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
      regexAnchor = this.search_contains ? "" : "^";
      regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.disabled && !option.empty) {
          if (option.group) {
            $('#' + option.dom_id).css('display', 'none');
          } else if (!(this.is_multiple && option.selected)) {
            found = false;
            result_id = option.dom_id;
            result = $("#" + result_id);
            if (regex.test(option.html)) {
              found = true;
              results += 1;
            } else if (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0) {
              parts = option.html.replace(/\[|\]/g, "").split(" ");
              if (parts.length) {
                for (_j = 0, _len2 = parts.length; _j < _len2; _j++) {
                  part = parts[_j];
                  if (regex.test(part)) {
                    found = true;
                    results += 1;
                  }
                }
              }
            }
            if (found) {
              if (searchText.length) {
                startpos = option.html.search(zregex);
                text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
                text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              } else {
                text = option.html;
              }
              result.html(text);
              this.result_activate(result);
              if (option.group_array_index != null) {
                $("#" + this.results_data[option.group_array_index].dom_id).css('display', 'list-item');
              }
            } else {
              if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
                this.result_clear_highlight();
              }
              this.result_deactivate(result);
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        return this.no_results(searchText);
      } else {
        return this.winnow_results_set_highlight();
      }
    };

    Chosen.prototype.winnow_results_clear = function() {
      var li, lis, _i, _len, _results;
      this.search_field.val("");
      lis = this.search_results.find("li");
      _results = [];
      for (_i = 0, _len = lis.length; _i < _len; _i++) {
        li = lis[_i];
        li = $(li);
        if (li.hasClass("group-result")) {
          _results.push(li.css('display', 'auto'));
        } else if (!this.is_multiple || !li.hasClass("result-selected")) {
          _results.push(this.result_activate(li));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;
      if (!this.result_highlight) {
        selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
        do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
        if (do_high != null) return this.result_do_highlight(do_high);
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var no_results_html;
      no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
      no_results_html.find("span").first().html(terms);
      return this.search_results.append(no_results_html);
    };

    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };

    Chosen.prototype.keydown_arrow = function() {
      var first_active, next_sib;
      if (!this.result_highlight) {
        first_active = this.search_results.find("li.active-result").first();
        if (first_active) this.result_do_highlight($(first_active));
      } else if (this.results_showing) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) this.result_do_highlight(next_sib);
      }
      if (!this.results_showing) return this.results_show();
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices > 0) this.results_hide();
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        this.pending_backstroke = this.search_container.siblings("li.search-choice").last();
        if (this.single_backstroke_delete) {
          return this.keydown_backstroke();
        } else {
          return this.pending_backstroke.addClass("search-choice-focus");
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) this.clear_backstroke();
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) this.result_select(evt);
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var dd_top, div, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $('<div />', {
          'style': style_block
        });
        div.text(this.search_field.val());
        $('body').append(div);
        w = div.width() + 25;
        div.remove();
        if (w > this.f_width - 10) w = this.f_width - 10;
        this.search_field.css({
          'width': w + 'px'
        });
        dd_top = this.container.height();
        return this.dropdown.css({
          "top": dd_top + "px"
        });
      }
    };

    Chosen.prototype.generate_random_id = function() {
      var string;
      string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
      while ($("#" + string).length > 0) {
        string += this.generate_random_char();
      }
      return string;
    };

    return Chosen;

  })(AbstractChosen);

  get_side_border_padding = function(elmt) {
    var side_border_padding;
    return side_border_padding = elmt.outerWidth() - elmt.width();
  };

  root.get_side_border_padding = get_side_border_padding;

}).call(this);

define("chosen", function(){});

/**
 * @fileOverview  Component: Forms
 * @module      components/forms
 * @exports     components/forms
 * @requires    jQuery
 * @author      mehrwert
 * @version     $Id$
 */
define('components/forms', [
  'jquery',
  'components/validate',
  'libs/jquery/jquery.dtag_replaceForms',
  'chosen'
], function ($) {
  var exports = {
    replaceUiElements: function() {
      // Replace checkboxes
      var $checkBoxes = $(".DTExperience input[type=checkbox]");
      $checkBoxes.formReplace({
        markup: '<span class="checkbox"><span aria-hidden="true" class="icon-checkmark"></span></span>'
      });

      // Replace radio buttons
      var $radioButtons = $(".DTExperience input[type=radio]");
      $radioButtons.formReplace({
        markup: '<div class="radiobutton"><span aria-hidden="true" class="icon-radiobutton_shadow" role="radio" aria-checked="false"></span> <span aria-hidden="true" class="icon-radiobutton_inner" role="radio" aria-checked="true"></span> <span aria-hidden="true" class="icon-radiobutton_outer" role="radio" aria-checked="false"></span> <span aria-hidden="true" class="icon-radiobutton_outer after" role="radio" aria-checked="false"></span></div>'
      });

      // Configure chosen
      $(".DTExperience .tk-dropdown").chosen({
        disable_search_threshold: 100
      });
    },

    init: function() {
      exports.replaceUiElements();
    }
  };

  $(function() {
    exports.init();
  });

  return exports;
});
/*! DTAG Row Events - v0.1.0 - 2012-12-12
* Copyright (c) 2012 Jonas Ulrich | ruhmesmeile; Licensed MIT */
// use AMD if present
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define('libs/jquery/jquery.dtag_tables',['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

  /**
   * Add responsiveness to table
   *
   * @param header_class string Class name of duplicated headers
   */
  $.fn.dtag_tables = function (header_class) {
    
    // check config
    header_class = header_class || 'no-more-table-header';
    
    // get headers
    var headers = [];
    this.find('thead tr th').each(function() {
      headers.push($(this).text());
    });
    
    // add headers to cells
    this.find('tbody tr').each(function() {
      $(this).find('td').each(function(index) {
        $(this).prepend('<span class="' + header_class + '">' +
          headers[index] + '</span>');
      });
    });
  };
  
  /**
   * Add reposiveness to all tables with given class name
   * 
   * @param responsive_table_class string class name to look for
   * @param header_class string Class name of duplicated headers
   */
  $.dtag_tables = function (responsive_table_class, header_class) {
    
    // check config
    if (typeof responsive_table_class === 'object') {
      header_class = responsive_table_class.header_class;
      responsive_table_class = responsive_table_class.responsive_table_class;
    }
    responsive_table_class = responsive_table_class || 'no-more-table';
    
    // search tables and add responsiveness
    if($('.DTExperience .' + responsive_table_class).length) {
      $('.DTExperience table.' + responsive_table_class).dtag_tables(header_class);
    }
  };

}));

/*
 * Initialize jquery.dtag_tables
 */
define('components/tables', ['jquery', 'libs/jquery/jquery.dtag_tables'], function($) {
  
  $(function () {
    // initialize plugin using defaults
    $.dtag_tables();
  });
  
});
/*! qTip2 v2.0.0 | http://craigsworks.com/projects/qtip2/ | Licensed MIT, GPL */
(function(a,b,c){(function(a){"use strict",typeof define=="function"&&define.amd?define('libs/jquery/jquery.qtip.min',["jquery"],a):jQuery&&!jQuery.fn.qtip&&a(jQuery)})(function(d){function I(a){var b=function(a){return a===g||"object"!=typeof a},c=function(a){return!d.isFunction(a)&&(!a&&!a.attr||a.length<1||"object"==typeof a&&!a.jquery)};if(!a||"object"!=typeof a)return f;b(a.metadata)&&(a.metadata={type:a.metadata});if("content"in a){if(b(a.content)||a.content.jquery)a.content={text:a.content};c(a.content.text||f)&&(a.content.text=f),"title"in a.content&&(b(a.content.title)&&(a.content.title={text:a.content.title}),c(a.content.title.text||f)&&(a.content.title.text=f))}return"position"in a&&b(a.position)&&(a.position={my:a.position,at:a.position}),"show"in a&&b(a.show)&&(a.show=a.show.jquery?{target:a.show}:{event:a.show}),"hide"in a&&b(a.hide)&&(a.hide=a.hide.jquery?{target:a.hide}:{event:a.hide}),"style"in a&&b(a.style)&&(a.style={classes:a.style}),d.each(u,function(){this.sanitize&&this.sanitize(a)}),a}function J(h,i,q,r){function Q(a){var b=0,c,d=i,e=a.split(".");while(d=d[e[b++]])b<e.length&&(c=d);return[c||i,e.pop()]}function R(a,b,c){var e=d.Event("tooltip"+a);return e.originalEvent=(c?d.extend({},c):g)||P.event||g,M.trigger(e,[s].concat(b||[])),!e.isDefaultPrevented()}function S(){var a=i.style.widget;M.toggleClass("ui-helper-reset "+y,a).toggleClass(B,i.style.def&&!a),O.content&&O.content.toggleClass(y+"-content",a),O.titlebar&&O.titlebar.toggleClass(y+"-header",a),O.button&&O.button.toggleClass(x+"-icon",!a)}function T(a){O.title&&(O.titlebar.remove(),O.titlebar=O.title=O.button=g,a!==f&&s.reposition())}function U(){var a=i.content.title.button,b=typeof a=="string",c=b?a:"Close tooltip";O.button&&O.button.remove(),a.jquery?O.button=a:O.button=d("<a />",{"class":"ui-state-default ui-tooltip-close "+(i.style.widget?"":x+"-icon"),title:c,"aria-label":c}).prepend(d("<span />",{"class":"ui-icon ui-icon-close",html:"&times;"})),O.button.appendTo(O.titlebar).attr("role","button").click(function(a){return M.hasClass(z)||s.hide(a),f}),s.redraw()}function V(){var a=J+"-title";O.titlebar&&T(),O.titlebar=d("<div />",{"class":x+"-titlebar "+(i.style.widget?"ui-widget-header":"")}).append(O.title=d("<div />",{id:a,"class":x+"-title","aria-atomic":e})).insertBefore(O.content).delegate(".ui-tooltip-close","mousedown keydown mouseup keyup mouseout",function(a){d(this).toggleClass("ui-state-active ui-state-focus",a.type.substr(-4)==="down")}).delegate(".ui-tooltip-close","mouseover mouseout",function(a){d(this).toggleClass("ui-state-hover",a.type==="mouseover")}),i.content.title.button?U():s.rendered&&s.redraw()}function W(a){var b=O.button,c=O.title;if(!s.rendered)return f;a?(c||V(),U()):b.remove()}function X(a,b){var c=O.title;if(!s.rendered||!a)return f;d.isFunction(a)&&(a=a.call(h,P.event,s));if(a===f||!a&&a!=="")return T(f);a.jquery&&a.length>0?c.empty().append(a.css({display:"block"})):c.html(a),s.redraw(),b!==f&&s.rendered&&M[0].offsetWidth>0&&s.reposition(P.event)}function Y(a,b){function g(a){function i(c){c&&(delete h[c.src],clearTimeout(s.timers.img[c.src]),d(c).unbind(N)),d.isEmptyObject(h)&&(s.redraw(),b!==f&&s.reposition(P.event),a())}var g,h={};if((g=e.find("img[src]:not([height]):not([width])")).length===0)return i();g.each(function(a,b){if(h[b.src]!==c)return;var e=0,f=3;(function g(){if(b.height||b.width||e>f)return i(b);e+=1,s.timers.img[b.src]=setTimeout(g,700)})(),d(b).bind("error"+N+" load"+N,function(){i(this)}),h[b.src]=b})}var e=O.content;return!s.rendered||!a?f:(d.isFunction(a)&&(a=a.call(h,P.event,s)||""),a.jquery&&a.length>0?e.empty().append(a.css({display:"block"})):e.html(a),s.rendered<0?M.queue("fx",g):(L=0,g(d.noop)),s)}function Z(){function l(a){if(M.hasClass(z))return f;clearTimeout(s.timers.show),clearTimeout(s.timers.hide);var b=function(){s.toggle(e,a)};i.show.delay>0?s.timers.show=setTimeout(b,i.show.delay):b()}function m(a){if(M.hasClass(z)||K||L)return f;var b=d(a.relatedTarget||a.target),e=b.closest(A)[0]===M[0],h=b[0]===g.show[0];clearTimeout(s.timers.show),clearTimeout(s.timers.hide);if(c.target==="mouse"&&e||i.hide.fixed&&/mouse(out|leave|move)/.test(a.type)&&(e||h)){try{a.preventDefault(),a.stopImmediatePropagation()}catch(j){}return}i.hide.delay>0?s.timers.hide=setTimeout(function(){s.hide(a)},i.hide.delay):s.hide(a)}function n(a){if(M.hasClass(z))return f;clearTimeout(s.timers.inactive),s.timers.inactive=setTimeout(function(){s.hide(a)},i.hide.inactive)}function o(a){s.rendered&&M[0].offsetWidth>0&&s.reposition(a)}var c=i.position,g={show:i.show.target,hide:i.hide.target,viewport:d(c.viewport),document:d(b),body:d(b.body),window:d(a)},j={show:d.trim(""+i.show.event).split(" "),hide:d.trim(""+i.hide.event).split(" ")},k=d.browser.msie&&parseInt(d.browser.version,10)===6;M.bind("mouseenter"+N+" mouseleave"+N,function(a){var b=a.type==="mouseenter";b&&s.focus(a),M.toggleClass(D,b)}),/mouse(out|leave)/i.test(i.hide.event)&&i.hide.leave==="window"&&g.window.bind("mouseout"+N+" blur"+N,function(a){!/select|option/.test(a.target.nodeName)&&!a.relatedTarget&&s.hide(a)}),i.hide.fixed?(g.hide=g.hide.add(M),M.bind("mouseover"+N,function(){M.hasClass(z)||clearTimeout(s.timers.hide)})):/mouse(over|enter)/i.test(i.show.event)&&g.hide.bind("mouseleave"+N,function(a){clearTimeout(s.timers.show)}),(""+i.hide.event).indexOf("unfocus")>-1&&c.container.closest("html").bind("mousedown"+N,function(a){var b=d(a.target),c=s.rendered&&!M.hasClass(z)&&M[0].offsetWidth>0,e=b.parents(A).filter(M[0]).length>0;b[0]!==h[0]&&b[0]!==M[0]&&!e&&!h.has(b[0]).length&&!b.attr("disabled")&&s.hide(a)}),"number"==typeof i.hide.inactive&&(g.show.bind("qtip-"+q+"-inactive",n),d.each(t.inactiveEvents,function(a,b){g.hide.add(O.tooltip).bind(b+N+"-inactive",n)})),d.each(j.hide,function(a,b){var c=d.inArray(b,j.show),e=d(g.hide);c>-1&&e.add(g.show).length===e.length||b==="unfocus"?(g.show.bind(b+N,function(a){M[0].offsetWidth>0?m(a):l(a)}),delete j.show[c]):g.hide.bind(b+N,m)}),d.each(j.show,function(a,b){g.show.bind(b+N,l)}),"number"==typeof i.hide.distance&&g.show.add(M).bind("mousemove"+N,function(a){var b=P.origin||{},c=i.hide.distance,d=Math.abs;(d(a.pageX-b.pageX)>=c||d(a.pageY-b.pageY)>=c)&&s.hide(a)}),c.target==="mouse"&&(g.show.bind("mousemove"+N,function(a){v={pageX:a.pageX,pageY:a.pageY,type:"mousemove"}}),c.adjust.mouse&&(i.hide.event&&(M.bind("mouseleave"+N,function(a){(a.relatedTarget||a.target)!==g.show[0]&&s.hide(a)}),O.target.bind("mouseenter"+N+" mouseleave"+N,function(a){P.onTarget=a.type==="mouseenter"})),g.document.bind("mousemove"+N,function(a){s.rendered&&P.onTarget&&!M.hasClass(z)&&M[0].offsetWidth>0&&s.reposition(a||v)}))),(c.adjust.resize||g.viewport.length)&&(d.event.special.resize?g.viewport:g.window).bind("resize"+N,o),(g.viewport.length||k&&M.css("position")==="fixed")&&g.viewport.bind("scroll"+N,o)}function _(){var c=[i.show.target[0],i.hide.target[0],s.rendered&&O.tooltip[0],i.position.container[0],i.position.viewport[0],i.position.container.closest("html")[0],a,b];s.rendered?d([]).pushStack(d.grep(c,function(a){return typeof a=="object"})).unbind(N):i.show.target.unbind(N+"-create")}var s=this,E=b.body,J=x+"-"+q,K=0,L=0,M=d(),N=".qtip-"+q,O,P;s.id=q,s.rendered=f,s.destroyed=f,s.elements=O={target:h},s.timers={img:{}},s.options=i,s.checks={},s.plugins={},s.cache=P={event:{},target:d(),disabled:f,attr:r,onTarget:f,lastClass:""},s.checks.builtin={"^id$":function(a,b,c){var g=c===e?t.nextid:c,h=x+"-"+g;g!==f&&g.length>0&&!d("#"+h).length&&(M[0].id=h,O.content[0].id=h+"-content",O.title[0].id=h+"-title")},"^content.text$":function(a,b,c){Y(c)},"^content.title.text$":function(a,b,c){if(!c)return T();!O.title&&c&&V(),X(c)},"^content.title.button$":function(a,b,c){W(c)},"^position.(my|at)$":function(a,b,c){"string"==typeof c&&(a[b]=new u.Corner(c))},"^position.container$":function(a,b,c){s.rendered&&M.appendTo(c)},"^show.ready$":function(){s.rendered?s.toggle(e):s.render(1)},"^style.classes$":function(a,b,c){M.attr("class",x+" qtip "+c)},"^style.widget|content.title":S,"^events.(render|show|move|hide|focus|blur)$":function(a,b,c){M[(d.isFunction(c)?"":"un")+"bind"]("tooltip"+b,c)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){var a=i.position;M.attr("tracking",a.target==="mouse"&&a.adjust.mouse),_(),Z()}},d.extend(s,{render:function(a){if(s.rendered)return s;var b=i.content.text,c=i.content.title.text,g=i.position;return d.attr(h[0],"aria-describedby",J),M=O.tooltip=d("<div/>",{id:J,"class":x+" qtip "+B+" "+i.style.classes+" "+x+"-pos-"+i.position.my.abbrev(),width:i.style.width||"",height:i.style.height||"",tracking:g.target==="mouse"&&g.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":f,"aria-describedby":J+"-content","aria-hidden":e}).toggleClass(z,P.disabled).data("qtip",s).appendTo(i.position.container).append(O.content=d("<div />",{"class":x+"-content",id:J+"-content","aria-atomic":e})),s.rendered=-1,L=1,K=1,c&&(V(),d.isFunction(c)||X(c,f)),d.isFunction(b)||Y(b,f),s.rendered=e,S(),d.each(i.events,function(a,b){d.isFunction(b)&&M.bind(a==="toggle"?"tooltipshow tooltiphide":"tooltip"+a,b)}),d.each(u,function(){this.initialize==="render"&&this(s)}),Z(),M.queue("fx",function(b){R("render"),L=0,K=0,s.redraw(),(i.show.ready||a)&&s.toggle(e,P.event,f),b()}),s},get:function(a){var b,c;switch(a.toLowerCase()){case"dimensions":b={height:M.outerHeight(),width:M.outerWidth()};break;case"offset":b=u.offset(M,i.position.container);break;default:c=Q(a.toLowerCase()),b=c[0][c[1]],b=b.precedance?b.string():b}return b},set:function(a,b){function n(a,b){var c,d,e;for(c in l)for(d in l[c])if(e=(new RegExp(d,"i")).exec(a))b.push(e),l[c][d].apply(s,b)}var c=/^position\.(my|at|adjust|target|container)|style|content|show\.ready/i,h=/^content\.(title|attr)|style/i,j=f,k=f,l=s.checks,m;return"string"==typeof a?(m=a,a={},a[m]=b):a=d.extend(e,{},a),d.each(a,function(b,e){var f=Q(b.toLowerCase()),g;g=f[0][f[1]],f[0][f[1]]="object"==typeof e&&e.nodeType?d(e):e,a[b]=[f[0],f[1],e,g],j=c.test(b)||j,k=h.test(b)||k}),I(i),K=L=1,d.each(a,n),K=L=0,s.rendered&&M[0].offsetWidth>0&&(j&&s.reposition(i.position.target==="mouse"?g:P.event),k&&s.redraw()),s},toggle:function(a,c){function t(){a?(d.browser.msie&&M[0].style.removeAttribute("filter"),M.css("overflow",""),"string"==typeof h.autofocus&&d(h.autofocus,M).focus(),h.target.trigger("qtip-"+q+"-inactive")):M.css({display:"",visibility:"",opacity:"",left:"",top:""}),R(a?"visible":"hidden")}if(!s.rendered)return a?s.render(1):s;var g=a?"show":"hide",h=i[g],j=i[a?"hide":"show"],k=i.position,l=i.content,m=M[0].offsetWidth>0,n=a||h.target.length===1,o=!c||h.target.length<2||P.target[0]===c.target,p,r;(typeof a).search("boolean|number")&&(a=!m);if(!M.is(":animated")&&m===a&&o)return s;if(c){if(/over|enter/.test(c.type)&&/out|leave/.test(P.event.type)&&i.show.target.add(c.target).length===i.show.target.length&&M.has(c.relatedTarget).length)return s;P.event=d.extend({},c)}return R(g,[90])?(d.attr(M[0],"aria-hidden",!a),a?(P.origin=d.extend({},v),s.focus(c),d.isFunction(l.text)&&Y(l.text,f),d.isFunction(l.title.text)&&X(l.title.text,f),!G&&k.target==="mouse"&&k.adjust.mouse&&(d(b).bind("mousemove.qtip",function(a){v={pageX:a.pageX,pageY:a.pageY,type:"mousemove"}}),G=e),s.reposition(c,arguments[2]),!h.solo||d(A,h.solo).not(M).qtip("hide",d.Event("tooltipsolo"))):(clearTimeout(s.timers.show),delete P.origin,G&&!d(A+'[tracking="true"]:visible',h.solo).not(M).length&&(d(b).unbind("mousemove.qtip"),G=f),s.blur(c)),h.effect===f||n===f?(M[g](),t.call(M)):d.isFunction(h.effect)?(M.stop(1,1),h.effect.call(M,s),M.queue("fx",function(a){t(),a()})):M.fadeTo(90,a?1:0,t),a&&h.target.trigger("qtip-"+q+"-inactive"),s):s},show:function(a){return s.toggle(e,a)},hide:function(a){return s.toggle(f,a)},focus:function(a){if(!s.rendered)return s;var b=d(A),c=parseInt(M[0].style.zIndex,10),e=t.zindex+b.length,f=d.extend({},a),g;return M.hasClass(C)||R("focus",[e],f)&&(c!==e&&(b.each(function(){this.style.zIndex>c&&(this.style.zIndex=this.style.zIndex-1)}),b.filter("."+C).qtip("blur",f)),M.addClass(C)[0].style.zIndex=e),s},blur:function(a){return M.removeClass(C),R("blur",[M.css("zIndex")],a),s},reposition:function(c,e){if(!s.rendered||K)return s;K=1;var g=i.position.target,h=i.position,j=h.my,k=h.at,q=h.adjust,r=q.method.split(" "),t=M.outerWidth(),w=M.outerHeight(),x=0,y=0,z=M.css("position")==="fixed",A=h.viewport,B={left:0,top:0},C=h.container,D=M[0].offsetWidth>0,E,F,G;if(d.isArray(g)&&g.length===2)k={x:m,y:l},B={left:g[0],top:g[1]};else if(g==="mouse"&&(c&&c.pageX||P.event.pageX))k={x:m,y:l},c=(c&&(c.type==="resize"||c.type==="scroll")?P.event:c&&c.pageX&&c.type==="mousemove"?c:v&&v.pageX&&(q.mouse||!c||!c.pageX)?{pageX:v.pageX,pageY:v.pageY}:!q.mouse&&P.origin&&P.origin.pageX&&i.show.distance?P.origin:c)||c||P.event||v||{},B={top:c.pageY,left:c.pageX};else{g==="event"&&c&&c.target&&c.type!=="scroll"&&c.type!=="resize"?P.target=d(c.target):g!=="event"&&(P.target=d(g.jquery?g:O.target)),g=P.target,g=d(g).eq(0);if(g.length===0)return s;g[0]===b||g[0]===a?(x=u.iOS?a.innerWidth:g.width(),y=u.iOS?a.innerHeight:g.height(),g[0]===a&&(B={top:(A||g).scrollTop(),left:(A||g).scrollLeft()})):u.imagemap&&g.is("area")?E=u.imagemap(s,g,k,u.viewport?r:f):u.svg&&typeof g[0].xmlbase=="string"?E=u.svg(s,g,k,u.viewport?r:f):(x=g.outerWidth(),y=g.outerHeight(),B=u.offset(g,C)),E&&(x=E.width,y=E.height,F=E.offset,B=E.position);if(u.iOS>3.1&&u.iOS<4.1||u.iOS>=4.3&&u.iOS<4.33||!u.iOS&&z)G=d(a),B.left-=G.scrollLeft(),B.top-=G.scrollTop();B.left+=k.x===o?x:k.x===p?x/2:0,B.top+=k.y===n?y:k.y===p?y/2:0}return B.left+=q.x+(j.x===o?-t:j.x===p?-t/2:0),B.top+=q.y+(j.y===n?-w:j.y===p?-w/2:0),u.viewport?(B.adjusted=u.viewport(s,B,h,x,y,t,w),F&&B.adjusted.left&&(B.left+=F.left),F&&B.adjusted.top&&(B.top+=F.top)):B.adjusted={left:0,top:0},R("move",[B,A.elem||A],c)?(delete B.adjusted,e===f||!D||isNaN(B.left)||isNaN(B.top)||g==="mouse"||!d.isFunction(h.effect)?M.css(B):d.isFunction(h.effect)&&(h.effect.call(M,s,d.extend({},B)),M.queue(function(a){d(this).css({opacity:"",height:""}),d.browser.msie&&this.style.removeAttribute("filter"),a()})),K=0,s):s},redraw:function(){if(s.rendered<1||L)return s;var a=i.style,b=i.position.container,c,d,e,f;return L=1,R("redraw"),a.height&&M.css(k,a.height),a.width?M.css(j,a.width):(M.css(j,"").appendTo(H),d=M.width(),d%2<1&&(d+=1),e=M.css("max-width")||"",f=M.css("min-width")||"",c=(e+f).indexOf("%")>-1?b.width()/100:0,e=(e.indexOf("%")>-1?c:1)*parseInt(e,10)||d,f=(f.indexOf("%")>-1?c:1)*parseInt(f,10)||0,d=e+f?Math.min(Math.max(d,f),e):d,M.css(j,Math.round(d)).appendTo(b)),R("redrawn"),L=0,s},disable:function(a){return"boolean"!=typeof a&&(a=!M.hasClass(z)&&!P.disabled),s.rendered?(M.toggleClass(z,a),d.attr(M[0],"aria-disabled",a)):P.disabled=!!a,s},enable:function(){return s.disable(f)},destroy:function(){var a=h[0],b=d.attr(a,F),c=h.data("qtip");s.destroyed=e,s.rendered&&(M.stop(1,0).remove(),d.each(s.plugins,function(){this.destroy&&this.destroy()})),clearTimeout(s.timers.show),clearTimeout(s.timers.hide),_();if(!c||s===c)d.removeData(a,"qtip"),i.suppress&&b&&(d.attr(a,"title",b),h.removeAttr(F)),h.removeAttr("aria-describedby");return h.unbind(".qtip-"+q),delete w[s.id],h}})}function K(a,c){var h,i,j,k,l,m=d(this),n=d(b.body),o=this===b?n:m,p=m.metadata?m.metadata(c.metadata):g,q=c.metadata.type==="html5"&&p?p[c.metadata.name]:g,r=m.data(c.metadata.name||"qtipopts");try{r=typeof r=="string"?d.parseJSON(r):r}catch(s){}k=d.extend(e,{},t.defaults,c,typeof r=="object"?I(r):g,I(q||p)),i=k.position,k.id=a;if("boolean"==typeof k.content.text){j=m.attr(k.content.attr);if(k.content.attr!==f&&j)k.content.text=j;else return f}i.container.length||(i.container=n),i.target===f&&(i.target=o),k.show.target===f&&(k.show.target=o),k.show.solo===e&&(k.show.solo=i.container.closest("body")),k.hide.target===f&&(k.hide.target=o),k.position.viewport===e&&(k.position.viewport=i.container),i.container=i.container.eq(0),i.at=new u.Corner(i.at),i.my=new u.Corner(i.my);if(d.data(this,"qtip"))if(k.overwrite)m.qtip("destroy");else if(k.overwrite===f)return f;return k.suppress&&(l=d.attr(this,"title"))&&d(this).removeAttr("title").attr(F,l).attr("title",""),h=new J(m,k,a,!!j),d.data(this,"qtip",h),m.bind("remove.qtip-"+a+" removeqtip.qtip-"+a,function(){h.destroy()}),h}var e=!0,f=!1,g=null,h="x",i="y",j="width",k="height",l="top",m="left",n="bottom",o="right",p="center",q="flip",r="flipinvert",s="shift",t,u,v,w={},x="ui-tooltip",y="ui-widget",z="ui-state-disabled",A="div.qtip."+x,B=x+"-default",C=x+"-focus",D=x+"-hover",E="_replacedByqTip",F="oldtitle",G,H;H=d("<div/>",{id:"qtip-rcontainer"}),d(function(){H.appendTo(b.body)}),t=d.fn.qtip=function(a,b,h){var i=(""+a).toLowerCase(),j=g,k=d.makeArray(arguments).slice(1),l=k[k.length-1],m=this[0]?d.data(this[0],"qtip"):g;if(!arguments.length&&m||i==="api")return m;if("string"==typeof a)return this.each(function(){var a=d.data(this,"qtip");if(!a)return e;l&&l.timeStamp&&(a.cache.event=l);if(i!=="option"&&i!=="options"||!b)a[i]&&a[i].apply(a[i],k);else if(d.isPlainObject(b)||h!==c)a.set(b,h);else return j=a.get(b),f}),j!==g?j:this;if("object"==typeof a||!arguments.length)return m=I(d.extend(e,{},a)),t.bind.call(this,m,l)},t.bind=function(a,b){return this.each(function(g){function n(a){function b(){l.render(typeof a=="object"||h.show.ready),i.show.add(i.hide).unbind(k)}if(l.cache.disabled)return f;l.cache.event=d.extend({},a),l.cache.target=a?d(a.target):[c],h.show.delay>0?(clearTimeout(l.timers.show),l.timers.show=setTimeout(b,h.show.delay),j.show!==j.hide&&i.hide.bind(j.hide,function(){clearTimeout(l.timers.show)})):b()}var h,i,j,k,l,m;m=d.isArray(a.id)?a.id[g]:a.id,m=!m||m===f||m.length<1||w[m]?t.nextid++:w[m]=m,k=".qtip-"+m+"-create",l=K.call(this,m,a);if(l===f)return e;h=l.options,d.each(u,function(){this.initialize==="initialize"&&this(l)}),i={show:h.show.target,hide:h.hide.target},j={show:d.trim(""+h.show.event).replace(/ /g,k+" ")+k,hide:d.trim(""+h.hide.event).replace(/ /g,k+" ")+k},/mouse(over|enter)/i.test(j.show)&&!/mouse(out|leave)/i.test(j.hide)&&(j.hide+=" mouseleave"+k),i.show.bind("mousemove"+k,function(a){v={pageX:a.pageX,pageY:a.pageY,type:"mousemove"},l.cache.onTarget=e}),i.show.bind(j.show,n),(h.show.ready||h.prerender)&&n(b)})},u=t.plugins={Corner:function(a){a=(""+a).replace(/([A-Z])/," $1").replace(/middle/gi,p).toLowerCase(),this.x=(a.match(/left|right/i)||a.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(a.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase();var b=a.charAt(0);this.precedance=b==="t"||b==="b"?i:h,this.string=function(){return this.precedance===i?this.y+this.x:this.x+this.y},this.abbrev=function(){var a=this.x.substr(0,1),b=this.y.substr(0,1);return a===b?a:this.precedance===i?b+a:a+b},this.invertx=function(a){this.x=this.x===m?o:this.x===o?m:a||this.x},this.inverty=function(a){this.y=this.y===l?n:this.y===n?l:a||this.y},this.clone=function(){return{x:this.x,y:this.y,precedance:this.precedance,string:this.string,abbrev:this.abbrev,clone:this.clone,invertx:this.invertx,inverty:this.inverty}}},offset:function(a,b){function j(a,b){c.left+=b*a.scrollLeft(),c.top+=b*a.scrollTop()}var c=a.offset(),e=a.closest("body")[0],f=b,g,h,i;if(f){do f.css("position")!=="static"&&(h=f.position(),c.left-=h.left+(parseInt(f.css("borderLeftWidth"),10)||0)+(parseInt(f.css("marginLeft"),10)||0),c.top-=h.top+(parseInt(f.css("borderTopWidth"),10)||0)+(parseInt(f.css("marginTop"),10)||0),!g&&(i=f.css("overflow"))!=="hidden"&&i!=="visible"&&(g=f));while((f=d(f[0].offsetParent)).length);g&&g[0]!==e&&j(g,1)}return c},iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||f,fn:{attr:function(a,b){if(this.length){var c=this[0],e="title",f=d.data(c,"qtip");if(a===e&&f&&"object"==typeof f&&f.options.suppress)return arguments.length<2?d.attr(c,F):(f&&f.options.content.attr===e&&f.cache.attr&&f.set("content.text",b),this.attr(F,b))}return d.fn["attr"+E].apply(this,arguments)},clone:function(a){var b=d([]),c="title",e=d.fn["clone"+E].apply(this,arguments);return a||e.filter("["+F+"]").attr("title",function(){return d.attr(this,F)}).removeAttr(F),e}}},d.each(u.fn,function(a,b){if(!b||d.fn[a+E])return e;var c=d.fn[a+E]=d.fn[a];d.fn[a]=function(){return b.apply(this,arguments)||c.apply(this,arguments)}}),d.ui||(d["cleanData"+E]=d.cleanData,d.cleanData=function(a){for(var b=0,e;(e=a[b])!==c;b++)try{d(e).triggerHandler("removeqtip")}catch(f){}d["cleanData"+E](a)}),t.version="@VERSION",t.nextid=0,t.inactiveEvents="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),t.zindex=15e3,t.defaults={prerender:f,id:f,overwrite:e,suppress:e,content:{text:e,attr:"title",title:{text:f,button:f}},position:{my:"top left",at:"bottom right",target:f,container:f,viewport:f,adjust:{x:0,y:0,mouse:e,resize:e,method:"flip flip"},effect:function(a,b,c){d(this).animate(b,{duration:200,queue:f})}},show:{target:f,event:"mouseenter",effect:e,delay:90,solo:f,ready:f,autofocus:f},hide:{target:f,event:"mouseleave",effect:e,delay:0,fixed:f,inactive:f,leave:"window",distance:f},style:{classes:"",widget:f,width:f,height:f,def:e},events:{render:g,move:g,show:g,hide:g,toggle:g,visible:g,hidden:g,focus:g,blur:g}}})})(window,document);
/*! DTAG Tooltip - v0.1.0 - 2012-12-12
* Copyright (c) 2012 Aki Alexandra Nofftz; Licensed MIT */
// use AMD if present
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define('libs/jquery/jquery.dtag_tooltip',['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

  // default initializer of tooltips; for config see settings below
  $.dtag_tooltip = function(config) {

    var settings = $.extend({}, $.dtag_tooltip.settings, config);

    // resave extended settings
    $.dtag_tooltip.settings = settings;

    // look for tooltip container and create, if not present
    if ($('#' + settings.container_id).length === 0) {
      $('body').append('<div id="' + settings.container_id + '" class="' +
        settings.container_classes + '"></div>');
    }

    // search for tooltips and set render position and render hook
    $(settings.selector).dtag_tooltip();
  };

  /*
   * Tooltip Settings
   *
   * each of these can be overwritten by calling the initializer:
   *
   *  $.dtag_tooltip({
   *    selector: '.mytooltips'
   *  });
   */
  $.dtag_tooltip.settings =  {
  
    // selector of tooltips
    // (all elements with class "tooltip" and attribute "title" present)
    selector: '.tooltip[title]',
    
    // class of elements containing tooltip content
    //
    // <div class="tooltip" title="fallback tooltip">
    //   <span class="tooltip-content">rich tooltip content ...</span>
    //   normal content
    // </div>
    content_class: 'tooltip-content',
    
    // class of tooltip icon, will be created as <span class="NAME"></span>
    icon_class: 'tooltip-icon',
    
    // id of tooltip container, will be created als <div> if not already present
    container_id: 'tooltip-container',
    
    // additional classes of tooltip container, only used when container will
    // be created by initializer
    container_classes: '',
    
    // additional classes of tooltip, note that "tooltip-display-DIRECTION" is
    // always added
    tooltip_classes: '',
    
    // default position of tooltips with no direction class present (top)
    default_position: 'top',
    
    // animation speed while showing/hiding tooltips
    // ("slow", "middle", "fast", msec)
    animation_speed: 'middle',

    // unit of tooltip position x/y/dx/dy in pixels,
    // should be 2/3 of stylesheet's $building_unit
    unit: 10
  };

  // defined position of tooltips (cf. CSS definitions)
  // - my, at: as defined by qTip2 (see qTip2 doc)
  // - x, y: adjust.x/y as defined by qTip in tooltipUnit (see qTip2 docs)
  // - dx, dy: "fly" start position als delta in tooltipUnit
  // see also http://craigsworks.com/projects/qtip2/docs/position/
  var tooltipPositions = {
    top:          { my: 'bottom center', at: 'top center',    x:  0, y: -1, dx:  0, dy: -1 },
    right:        { my: 'left center',   at: 'right center',  x:  1, y:  0, dx:  1, dy:  0 },
    bottom:       { my: 'top center',    at: 'bottom center', x:  0, y:  1, dx:  0, dy:  1 },
    left:         { my: 'right center',  at: 'left center',   x: -1, y:  0, dx: -1, dy:  0 },
    top_right:    { my: 'bottom left',   at: 'top right',     x: -3, y: -1, dx:  0, dy: -1 },
    top_left:     { my: 'bottom right',  at: 'top left',      x:  3, y: -1, dx:  0, dy: -1 },
    bottom_right: { my: 'top left',      at: 'bottom right',  x: -3, y:  1, dx:  0, dy:  1 },
    bottom_left:  { my: 'top right',     at: 'bottom left',   x:  3, y:  1, dx:  0, dy:  1 }
  };


  /*
   * event hook for showing tooltips
   * @see http://craigsworks.com/projects/qtip2/docs/api/events/#render
   */
  function tooltipRender(event, api) {
    var ele = $(api.elements.target);
    var settings = $.dtag_tooltip.settings;
    
    // do something with `event` to prevent lint errors
    if (event) {}

    // check for markup tooltip content
    var content = ele.find('.' + settings.content_class).html();
    if (! content) {
      // use title attribute as fallback
      content = ele.attr('title');
    }

    api.set('content.text', '<span class="content">'+content+'</span>' + '<span class="'+settings.icon_class+'"></span>');

    // check for tooltip position
    var pos = settings.default_position;
    for (var p in tooltipPositions) {
      if (ele.hasClass(p.replace('_', '-'))) {
        pos = p;
      }
    }

    // set classes and positions
    api.set('style.classes', settings.tooltip_classes +
      ' tooltip-display-' + pos.replace('_', '-'));
    api.set('position.my', tooltipPositions[pos].my);
    api.set('position.at', tooltipPositions[pos].at);
    api.set('position.adjust.x', tooltipPositions[pos].x * settings.unit);
    api.set('position.adjust.y', tooltipPositions[pos].y * settings.unit);

    // set custom show effect
    api.set('events.show', function() {
      api.set('show.effect', function() {
        $(this)
        .show()
        .css('opacity', 0)
        .css('margin-top', -1 * tooltipPositions[pos].dy * settings.unit)
        .css('margin-left', -1 * tooltipPositions[pos].dx * settings.unit)
        .stop(true, true);
        
        // ugly hack to allow overriding animate by jquery.transit
        if ($.fn.animate_orig) {
          $(this).animate_orig(
            {opacity: 1, marginTop: 0, marginLeft: 0},
            settings.animation_speed
          );
        } else {
          $(this).animate(
            {opacity: 1, marginTop: 0, marginLeft: 0},
            settings.animation_speed
          );
        }
      });
    });
  }
  
  // jQuery function to initialize a tooltip, please do not call qtip() directly
  $.fn.dtag_tooltip = function (config) {
    var settings = $.extend({
      position: {
        container: $('#' + $.dtag_tooltip.settings.container_id)
      },
      events: {
        render: tooltipRender
      }
    }, config);
    
    return this.qtip(settings);
  };

}));

/**
 * Initialize jquery.dtag_tooltip
 */

//Add qTip dependency, don't compile into plugin itself
//define(['jquery', 'libs/jquery/jquery.qtip.min', 'libs/jquery.dtag_tooltip'], function ($) {

define('components/tooltip', ['jquery', 'libs/jquery/jquery.qtip.min', 'libs/jquery/jquery.dtag_tooltip'], function ($) {

  $(function () {
    $.dtag_tooltip({
      container_classes: 'DTExperience',
      tooltip_classes: 'dtag-tooltip-style'
    });
  });

});
/*! DTAG Toolbar - v0.1.0 - 2012-12-12
* Copyright (c) 2012 Aki Alexandra Nofftz; Licensed MIT */
// use AMD if present
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define('libs/jquery/jquery.dtag_toolbar',['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

  // initialize toolbar
  function init(toolbar) {

    // look for existing drop down menu buttons
    var $dropdowns = $(toolbar.children('.dropdown'));
    // never hide dropdowns
    $dropdowns.each(function () {
      $(this).addClass('unreduceable');
    });

    // create "more" button if not present
    if ($dropdowns.length === 0) {

      // generate dropdown HTML code
      var dropdown = $(
        '<li class="unreduceable dropdown">' +
          '<button class="icon-only icon-context-menu"><span class="icon"></span></button>' +
          '<menu type="list"></menu>' +
        '</li>');
      toolbar.data('dtag_toolbar_dropdown', dropdown);
      toolbar.data('dtag_toolbar_dropdown_menu', dropdown.children('menu'));

      // check for magenta class and add, if necessary
      if (toolbar.find('li > button.magenta').length > 0) {
        dropdown.children('button').addClass('magenta');
      }
    } else {

      // define menu for reduced element (very last one), note that .last() is important
      toolbar.data('dtag_toolbar_dropdown_menu', $dropdowns.find('menu[type=list]:last').last());
    }

    // mark all existing buttons as reducable
    toolbar.children('li').each(function() {
      var $e = $(this);
      if (!$e.hasClass('unreduceable')) {
        $e.addClass('reduceable');
      }
    });

    // bind and trigger resize event
    $(window).bind('resize.dtag_toolbar', function() {
      resize(toolbar);
    });
    resize(toolbar);
  }

  // calculate toolbar size and move buttons into dropdown, if necessary
  function resize($toolbar) {

    // if no visible children present, there's nothing to do
    if ($toolbar.children('li:visible').length === 0) {
      return;
    }

    // Look for elements that have different top offsets than
    // the first what means that they are wrapped.
    // Repeat until nothing is reduced in that pass.
    var wrapped_elements = false;
    var had_reduced = false;
    do {
      var elems = $toolbar.children('li:visible');
      var i = elems.length;
      had_reduced = false;

      while (i > 0) {
        var $ele = $(elems[--i]);

        // If element's offset top is larger than first element's offset top
        // it is obviously wrapped.
        if ($ele.offset().top > $(elems[0]).offset().top) {

          wrapped_elements = true;

          // if reduceable, do it
          if ($ele.hasClass('reduceable')) {
            had_reduced = true;
            reduce($toolbar, $ele);
          } else {

            // special case: if last element is unreduceable and wrapped,
            // but there are reduceable elements present, reduce the most
            // left of them (wrapped or not)
            if (i === elems.length - 1) {
              do {
                $ele = $(elems[--i]);
                if ($ele.hasClass('reduceable')) {
                  had_reduced = true;
                  reduce($toolbar, $ele);
                  break;
                }
              } while (i > 0);
            }
          }
        }
      }
    } while (had_reduced);

/*      // special case: first element reduceable, still
      // wrapped unreduceable elements present and no more
      // reduceable elements
      if ($(elems[0]).hasClass('reduceable') && !do_unreduce && $toolbar.children('li.reduceable').length === 1) {

        // search for wrapped unreduceable elements
        var wrapped = false;
        $toolbar.children('li.unreduceable:visible').each(function() {
          if ($(this).offset().top > top) {
            wrapped = true;
          }
        });

        // something unreduceable wrapped: reduce first element
        if (wrapped) {
          reduce($toolbar, $(elems[0]));
        }
      }
    }*/

    // nothing wrapped, so try expanding
    if (!wrapped_elements && $toolbar.data('dtag_toolbar_dropdown_menu').children('li.reduceable').length > 0) {
      return unreduce($toolbar);
    }
  }

  // Reduce toolbar by moving element into dropdown
  function reduce($toolbar, $ele) {

    // if dropdown isn't visible yet, it would, so add its width
    var $dropdown = $toolbar.data('dtag_toolbar_dropdown');
    if ($dropdown && $dropdown.is(':hidden')) {
      $dropdown
      // attach and show dropdown
      .appendTo($toolbar)
      .show();
      // but hide dropdown menu
      // $toolbar.data('dtag_toolbar_dropdown_menu').hide();
    }

    // save element's position
    $ele.data('dtag_toolbar_position', $ele.prev());

    // check if text links exists
    if ($ele.children('a.list-item-title').length === 0) {
      var $btn = $ele.children('button');
      $('<a class="list-item-title">' + $btn.text() + '</a>')
        .attr('href', $btn.attr('action') ? $btn.attr('action') : '#')
        .appendTo($ele);
    }

    // move element into dropdown
    $ele.detach();
    $toolbar.data('dtag_toolbar_dropdown_menu').prepend($ele);

    // hide button and show text link
    $ele.children('button').hide();
    $ele.children('a.list-item-title').show();
  }

  // (Re-)Expand toolbar by moving elements into dropdown
  function unreduce($toolbar) {
    // move any reduced elements back to toolbar and then
    // call resize() to reduce odd elements again

    var $menu = $toolbar.data('dtag_toolbar_dropdown_menu');

    while (true) {
      var $ele = $menu.children('li.reduceable:first');

      // element left?
      if ($ele.length === 0) {
        break;
      }

      // move element back into saved position in toolbar
      $ele.detach();
      if ($ele.data('dtag_toolbar_position').length === 0) {
        // no saved position, should be first
        $toolbar.prepend($ele);
      } else {
        $ele.insertAfter($ele.data('dtag_toolbar_position'));
      }

      // hide text link and show button
      $ele.children('a.list-item-title').hide();
      $ele.children('button').show();
    }

    // check if dropdown is empty and remove
    if ($menu.children('li').length === 0 && $toolbar.data('dtag_toolbar_dropdown')) {
      $toolbar.data('dtag_toolbar_dropdown').hide().detach();
    }

    // call resize to avoid wrappings
    return resize($toolbar);
  }

  // Initialize toolbar tweeks on selected objects
  $.fn.dtag_toolbar = function() {
    return this.each(function() {
      init($(this));
    });
  };

  // quick default initializer, tries to find toolbars by itself
  $.dtag_toolbar = function(options) {

    if (typeof options === 'string') {
      options = { selector: options };
    }

    var settings = $.extend( {
      selector: 'menu[type=toolbar]'
    }, options);

    return $(document).find(settings.selector).dtag_toolbar();
  };

}));

/**
 * initialize jquery.dtag_toolbar
 */
define('components/toolbar', ['jquery', 'libs/jquery/jquery.dtag_toolbar'], function($) {

  // init toolbars using defaults
  $(function() {
    $.dtag_toolbar();
  });

});
/*! DTAG Treelist - v0.1.0 - 2012-12-12
* Copyright (c) 2012 Jonas Ulrich | ruhmesmeile; Licensed MIT */
/**
 * @fileOverview  Component: Tree list
 * @module      components/tree
 * @exports     components/tree
 * @requires    jQuery
 * @author      mehrwert
 * @version     $Id$
 */

// use AMD if present
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define('libs/jquery/jquery.dtag_treelist',['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

  // attaches toggle events to list
  $.fn.dtag_treelist = function (options) {
    var tree = this;

    // merge defaults
    var cfg = $.extend({}, $.dtag_treelist.defaults, options);

    // find and mark parents
    var parentElements =
      $(cfg.parent_element_selector, tree).addClass(cfg.class_hasSubelements);

    // attach events to toggles
    $(cfg.toggle_selector, parentElements).on(cfg.toggle_events,
      function (event) {

      // do not prevent link action!
      // we also need to access those parent pages
      if ($(this).attr('href') === '#' || $(this).attr('href') === undefined) {
        event.preventDefault();
      }

      // get relevant elements
      var toggle = $(this),
          subtree = $(cfg.toggle_elements,
          $(this).parent(cfg.toggle_parent_element_selector));

      // check if active and show or hide element
      if (toggle.hasClass(cfg.class_active)) {
        // Remove jQuery animation function here because they fail in merged js
        // subtree.slideUp(cfg.animation_speed, function() {
        subtree.css('display','none');
        toggle.removeClass(cfg.class_active);
          //});
      } else {
        // Remove jQuery animation function here because they fail in merged js
        //subtree.slideDown(cfg.animation_speed, function() {
        subtree.css('display','block');
        toggle.addClass(cfg.class_active);
          //});
      }
    });

    // hide inactive subelements
    $(cfg.toggle_selector, parentElements).each(function() {
      if (!$(this).hasClass(cfg.class_active)) {
        $(cfg.toggle_elements,
          $(this).parent(cfg.toggle_parent_element_selector)).hide();
      }
    });
  };

  // default initializer
  $.dtag_treelist = function(options) {

    // merge defaults
    var cfg = $.extend({}, $.dtag_treelist.defaults, options);

    // attach events to all lists
    $(cfg.list_selector).dtag_treelist(cfg);
  };

  // default settings
  $.dtag_treelist.defaults = {

    // selector of lists that plugins attaches to
    list_selector: 'ul.tree',

    // selector of elements having toggleable children
    parent_element_selector: 'li:has(ul)',

    // CSS class name of elements selected by parent_element_selector
    class_hasSubelements: 'has-sublist',

    // CSS class name of active toggles
    class_active: 'active',

    // toggle selector
    toggle_selector: '> a, > strong',

    // event(s) that toggle subelements
    toggle_events: 'click',

    // list element selector of toggles
    toggle_parent_element_selector: 'li',

    // element(s) that should be toggled
    toggle_elements: '> ul',

    // animation speed of slideUp / slideDown
    animation_speed: 300
  };

}));

/**
 * Initialize jquery.dtag_treelist
 */
define('components/treelist', ['jquery', 'libs/jquery/jquery.dtag_treelist'], function($) {

  $(function () {
    // intialize plugin using defaults
    $.dtag_treelist();
  });

});

/*! DTAG Dialog Handler - v0.1.0 - 2012-12-12
* Copyright (c) 2012 Jonas Ulrich | ruhmesmeile; Licensed MIT */
/*global console */

/**
 * @fileOverview  Component: Tree list
 * @module      components/tree
 * @exports     components/tree
 * @requires    jQuery
 * @author      mehrwert
 * @version     $Id$
 */

// use AMD if present
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define('libs/jquery/jquery.dtag_dialogHandler',['jquery'], factory);
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function ($) {
  var opts,
    exports = {
      name: 'dtag_dialogHandler',
      title: 'Modal Window',

      dialogHtml: [
        '<div id="modal-window">',
          '<div id="modal">',
            '<h2 class="underline">Modal Window</h2>',
            '<div class="modal-content">',
            '</div>',
            '<div class="modal-footer"></div>',
          '</div>',
        '</div>',

        '<div id="modal-bg"></div>'
      ].join('\n'),
      closeButtonHtml: [
        '<button class="icon-only icon-cancel small clean modal-close">',
          '<span aria-hidden="true" class="icon"></span>',
          '<span class="buttontext">Button</span>',
        '</button>'
      ].join('\n'),
      contentHtml: [
        '<p class="font-size-default">Suspendisse dictum feugiat nisl ut dapibus. Mauris iaculis porttitor posuere. Praesent id metus massa, ut blandit odio. Proin quis tortor orci. Etiam at risus et justo dignissim congue. Donec.</p>'
      ].join('\n'),

      transition: 'fade',
      dataAttribute: 'dialoghandler',
      lazy: false,
      modal: false,
      shown: false,
      maxWidth: 'none',

      init: function (options) {
        $('.DTExperience a[data-'+this.dataAttribute+'=true]')[exports.name](options);
      },

      /**
       * Init function, merges option and dispatches
       *
       * @param {Object} options
       */
      initialize: function ($els) {
        var a = this;

        if(!$('#modal-window').length && !$('#modal-bg').length) {
          $('body').append($(a.dialogHtml).hide());
        }

        $els.each(function (i) {
          var $el = $els.eq(i);
          var pluginInstance = $el.data(exports.dataAttribute);

          var lazy = $el.data(pluginInstance.dataAttribute+'Lazy');
          if(lazy) {
            pluginInstance.lazy = true;
          }

          var clickHandler = function () {
            pluginInstance.open.call(pluginInstance);
          };

          if(!pluginInstance.lazy) {
            $el.on("click." + pluginInstance.name, null, pluginInstance.data, clickHandler);
          }
        });
      },

      /**
       * Dialog detacher method
       *
       * @param {Function} callback
       */
      destroy: function () {
      },

      /**
       * Dialog open function
       */
      open: function () {
        var pluginInstance = this;
        var $modalWindow = $('#modal-window');

        var closeHandler = function (ev) {
          pluginInstance.close.call(pluginInstance, ev);
        };

        pluginInstance.shown = true;

        pluginInstance.setTitle(pluginInstance.title);
        pluginInstance.setContent(pluginInstance.contentHtml);
        if(pluginInstance.maxWidth) {
          pluginInstance.setMaxWidth(pluginInstance.maxWidth);
        }

        if(pluginInstance.modal) {
          $modalWindow.find('.modal-close').remove();
        } else {
          if(!$modalWindow.find('.modal-close').length) {
            var $closeButton = $(pluginInstance.closeButtonHtml);
            $closeButton.on('click.' + pluginInstance.name, null, null, closeHandler);
            $modalWindow.find('#modal').prepend($closeButton);
          }
        }

        $('#modal-window, #modal-bg').show();
      },

      /**
       * Dialog close function
       */
      close: function () {
        this.shown = false;
        $('#modal-window, #modal-bg').hide();
      },

      setTitle: function (text) {
        if(this.shown) {
          $('#modal-window').find('h2').text(text);
        }

        this.title = text;
      },

      setContent: function (html) {
        if(this.shown) {
          $('#modal-window').find('.modal-content').html(html);
        }

        this.contentHtml = html;
      },

      setMaxWidth: function (width) {
        var $modal = $('#modal-window #modal');
        var marginLeft, marginRight;

        marginLeft = marginRight = (this.maxWidth !== 'none') ? 'auto' : '';

        if(this.shown) {
          $modal.css({
            'max-width': width,
            'margin-left': marginLeft,
            'margin-right': marginRight
          });
        }

        this.maxWidth = width;
      },

      /**
       * Helpers/tools
       */
      helpers: {

        /**
         * Possible dialog dimension manipulation?
         */
        setDimensions: function () {

        },

        /**
         * Bind dialog links with ajax events
         */
        bindLinks: function () {

          if (typeof opts.linkBinding === 'function'){
            opts.linkBinding.call(this);
          } else {
            $(document).on('click.dialog', '[data-is-dialog-link="true"]', function(event) {
              event.preventDefault();
              // var trigger = this;

              var linkHref;
              if (typeof opts.onLinkBinding === 'function'){
                linkHref = opts.onLinkBinding.call(this);
              } else {
                exports.error('There is no valid onLinkBinding callback in jQuery.dtag_dialogHandler.' +
                  'Current type is ' + typeof opts.onLinkBinding);
              }

              if (linkHref !== '' && linkHref !== '#') {
                $.ajax({
                  url: linkHref,
                  data: opts.ajaxParams,
                  success: function(data) {
                    if ( data !== '' ) {

                      if (typeof opts.onResponse === 'function'){
                        // var content = opts.onResponse.call(this, data);
                      } else {
                        exports.error('There is no valid onResponse callback in jQuery.dtag_dialogHandler.' +
                          'Current type is ' + typeof opts.onResponse);
                      }

                      // open dialog here

                    }
                  }
                });
              } else {
              }

              return false;
            });
          }
        },

        /**
         * Unbind content links
         */
        unBindLinks: function () {
          // $main.off('click.dialog', '[data-is-dialog-link="true"]');
        }

      },

      error: function (debug) {
        if (window.console) {
          console.error(debug);
        }
      }

    };

  $.fn[exports.name] = function (opts) {
    var $els = this;
    var method = $.isPlainObject(opts) || !opts ? "" : opts;

    if (method && exports[method]) {
      exports[method].apply($els, Array.prototype.slice.call(arguments, 1));
    } else if (!method) {
      $els.each(function(i) {
        var pluginInstance = $.extend(true, { $el: $els.eq(i) }, exports, opts);
        // Write to data object for easy retrieval
        $els.eq(i).data(exports.dataAttribute, pluginInstance);
      });
      exports.initialize($els);
    } else {
      exports.error('Method ' +  method + ' does not exist on jQuery.' + exports.name);
    }
  };

  $[exports.name] = function () {
    exports.init.apply(exports, Array.prototype.slice.call(arguments));
  };
}));
/**
 * Initialize jquery.dtag_dialogHandler
 */
define('components/dialogHandler', ['jquery', 'libs/jquery/jquery.dtag_dialogHandler'], function($) {

  $(function () {
    // intialize plugin using defaults
    $.dtag_dialogHandler();
  });

});


(function($) {

	var opts,
		exports = {

			/**
			 * The pages array
			 *
			 * @type {Array}
			 */
			dialogs: {},

			/**
			 * Init function, merges option an dispatches
			 *
			 * @param {Object} options
			 */
			initialize: function(options) {

				opts = $.extend({}, $.fn.dtag_dialog.defaults, options);
				exports.destroy(function() {

					if(!$('#dialog-wrapper').length > 0) {
						$('body').append($(opts.markup).hide());
					}

					exports.helpers.bindLinks();

				});
			},

			/**
			 * Dialog destroy method
			 *
			 * @param {Function} callback
			 */
			destroy: function(callback) {
				exports.helpers.unBindLinks();
				if (typeof callback == 'function'){
					callback.call(this);
				}
			},

			/**
			 * Open dialog
			 * @param {Object} dialogParams
			 */
			open: function(dialogParams) {

				var dialog = $.extend({}, $.fn.dtag_dialog.defaults.dialog, dialogParams);

				if (typeof opts.onOpen == 'function'){
					content = opts.onOpen.call(this, dialog);
				} else {
					exports.error('There is no valid onOpen callback in jQuery.dtag_dialog.' +
						'Current type is ' + typeof opts.onOpen);
				}

				// TODO: Do this much more smarter
				$('.dialog-wrapper').attr('id', dialog.eventName);
				$('#dialog').css('width', dialog.width+'em');
				$('#dialog_content').html(dialog.content);

				var closeButton = $(opts.closeButtonMarkup).prependTo('#dialog').on('click', function() {
					exports.close();
				});

				$('.dialog-wrapper').show();

				// the voodoo - emit custom event
				dtag.emit(dialog.eventName);

			},

			/**
			 * Close dialog
			 *
			 */
			close: function() {

				if (typeof opts.onClose == 'function'){
					content = opts.onClose.call(this);
				} else {
					exports.error('There is no valid onClose callback in jQuery.dtag_dialog.' +
						'Current type is ' + typeof opts.onClose);
				}

				// TODO: Do this much more smarter
				$('.dialog-wrapper').removeAttr('id');
				$('#dialog_content').empty();
				$('#dialog_footer').remove();
//				$('#dialog_bg').hide();
				$('.dialog-wrapper').hide();

				$('.ui-tooltip').hide();

			},

			/**
			 * Helpers/tools
			 */
			helpers: {

				/**
				 * Set dimensions of sections!
				 */
				setDimensions: function() {

				},

				/**
				 * Bind dialog links with ajax events
				 */
				bindLinks: function () {

					if (typeof opts.linkBinding === 'function'){
						opts.linkBinding.call(this);
					} else {
						$(document).on('click.dialog', '[data-is-dialog-link="true"]', function(event) {
							event.preventDefault();
							var trigger = this;

							var linkHref;
							if (typeof opts.onLinkBinding === 'function'){
								linkHref = opts.onLinkBinding.call(this);
							} else {
								exports.error('There is no valid onLinkBinding callback in jQuery.dtag_dialog.' +
									'Current type is ' + typeof opts.onLinkBinding);
							}

							if (linkHref !== '' && linkHref !== '#') {
								$.ajax({
									url: linkHref,
									data: opts.ajaxParams,
									success: function(response) {
										if (response !== '') {

											if (typeof opts.onResponse === 'function'){
												// var content = opts.onResponse.call(this, data);
											} else {
												exports.error('There is no valid onResponse callback in jQuery.dtag_dialog.' +
													'Current type is ' + typeof opts.onResponse);
											}

											var dialog = {
												content: response,
												eventName: $(trigger).data('dialogEvent'),
												width: $(trigger).data('dialogWidth') / 10
											};

											exports.open(dialog);

										} else {
											exports.error('There was no valid response!');											
										}
									}
								});
							} else {
							}

							return false;
						});
					}
				},

				/**
				 * Unbind content links
				 */
				unBindLinks: function () {
					$(document).off('click.dialog', '[data-is-dialog-link="true"]');
				}
				
			},

			error: function(debug) {
				if (window.console && dtag.debug === true) {
					console.error(debug);
				}
			}

		};

	$.fn.dtag_dialog = function(method) {

		if (exports[method]) {
			return exports[method].apply( this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return exports.initialize.apply(this, arguments);
		} else {
			exports.error('Method ' +  method + ' does not exist on jQuery.dtag_dialog');
		}

	};

	$.fn.dtag_dialog.defaults = {

		/**
		 * The dialog markup
		 */
		markup: '<div class="dialog-wrapper">' +
			'		<div id="dialog_window">' +
			'			<div id="dialog"><div id="dialog_content"></div></div>' +
			'		</div>' +
			'		<div id="dialog_bg"></div>' +
			'	</div>',

		/**
		 * The close button markup
		 */
		closeButtonMarkup: '<button class="icon-only icon-cancel small clean" id="dialog_close">' +
			'<span aria-hidden="true" class="icon"></span>' +
			'<span class="buttontext">Close</span>' +
			'</button>',

		dialog: {
			content: '<div class="box-content"><p><strong>dialog.content:</strong><br /> This is custom dialog content. You should overide this!</div>',
			eventName: 'dtag_dialog_open',
			width: 50
		},

		ajaxParams: {'type': 78},
		onLinkBinding: function() {
			return $(this).prop('href');
		},
		onResponse: function(data) {
			return data;
		},
		onClose: function(page) {

		},
		onOpen: function(page) {

		}
	};

}(jQuery));
define("libs/jquery/jquery.dtag_dialog", function(){});

/**
 * Require jquery.dtag_pagehandler
 */
define('components/dialog', ['jquery', 'libs/jquery/jquery.dtag_dialog'], function($) {
	$.fn.dtag_dialog();
});

/**
 * @fileOverview	Search mover
 * @module 			template/moveSearch
 * @exports			template/moveSearch
 * @author			mehrwert
 * @version			$Id: moveSearch.js 2603 2012-09-19 09:02:38Z m.straschek $
 */
define('template/moveSearch', ['jquery'], function($){

	var exports = {

		/**
		 * The search mover function
		 * @param	{String}	to		'back' or leave empty
		 * @return	void
		 */
		move: function( to ){
				var search = $('#main_search_wrapper');
				var searchWrapper = $('#dtag_search');
				switch (to) {
					case 'back':
						search.prependTo(searchWrapper);
						searchWrapper.show();
						break;
					default:
						search.prependTo('#dtag_brandlevel .dtag-grid-col-right');
						searchWrapper.hide();
						break;
				}
		}
	};
	return exports;

});
/**
 * @fileOverview	Settings mover
 * @module 			template/moveSettings
 * @exports			template/moveSettings
 * @author			mehrwert
 * @version			$Id: moveSettings.js 2678 2012-10-02 16:13:58Z m.straschek $
 */
define('template/moveSettings', ['jquery'], function($){

	var exports = {
		/**
		 * The settings mover function
		 * @param	{String}	to		'back' or leave empty
		 * @return	void
		 */
		move: function( to ){
			var settingsButton = $('[data-is-settings-caller="true"]');
			switch (to) {
				case 'back':
					settingsButton.appendTo('#dtag_brandlevel .dtag-grid-col-right');
					break;
				default:
					settingsButton.insertBefore('#dtag_jumpmarks');
					break;
			}
		}
	};
	return exports;

});
/**
 * @fileOverview	Title bar mover
 * @module 			template/moveTitleBar
 * @exports			template/moveTitleBar
 * @author			mehrwert
 * @version			$Id: moveTitleBar.js 3159 2012-11-16 17:16:34Z m.straschek $
 */
define('template/moveTitleBar', ['jquery'], function($){

	var exports = {

		/**
		 * The title bar mover function
		 * @param	{String}	to		'back' or leave empty
		 * @return	void
		 */
		move:  function( to ){
			var serviceLevel = $('#dtag_servicelevel .dtag-inner');
			var mainTitleBar = $('#dtag_initial_content .title-bar');
			// mainTitleBar.prop({'data-iinitial-title-bar': 'true'});
			switch (to) {
				case 'back':
//					mainTitleBar = $('#dtag_servicelevel .title-bar');
//					mainTitleBar.prependTo('#dtag_initial_content');
//					mainTitleBar.find('.icon-only-manipulated')
//						.removeClass('icon-only')
//						.removeClass('icon-only-manipulated')
//						.addClass('minimal');
					// serviceLevel.show();

					// search.prependTo(searchWrapper);
					// searchWrapper.show();
					break;
				default:
					// serviceLevel.hide();
//					mainTitleBar.insertAfter(serviceLevel);
//					mainTitleBar.find('button:not(.icon-only),.button:not(.icon-only)')
//						.addClass('icon-only')
//						.addClass('icon-only-manipulated')
//						.removeClass('minimal');
					// mainTitleBar.prop({'data-initial-title-bar': 'true'});

					break;
			}
		}
	};

	return exports;

});
/**
 * @fileOverview	Settings dropdown
 * @module 			template/settingsDropdown
 * @exports			template/settingsDropdown
 * @author			mehrwert
 * @version			$Id: settingsDropdown.js 3252 2012-11-27 10:04:08Z m.straschek $
 */
define('template/settingsDropdown', ['jquery'], function($){

	var exports = {

			/**
			 * Flag if drawer slider is attached
			 */
			isAttached: false,

			/**
			 * The settings list
			 */
			settingsList: {},

			/**
			 * Set function
			 */
			setSettingsList: function() {
				exports.settingsList = $('#dtag_settingslist');
			},

			/**
			 * Attach function
			 *
			 * @return 		void
			 */
			attach: function() {
				if (exports.isAttached === false ) {
					exports.setSettingsList();
					$('#dtag_settings').hide();
					$('> ul', exports.settingsList).removeClass('list-decorated');
					$('> ul', exports.settingsList).addClass('dropdown-decorated');
					$(document).on('click', '[data-is-settings-caller="true"]', function(event) {
						event.preventDefault();
						if(exports.settingsList.is( ':visible' )) {
							exports.close();
						} else {
							exports.settingsList.insertAfter(this);
							exports.open();
						}
					});
					exports.isAttached = true;
				}
			},

			/**
			 * Detach function
			 *
			 * @return 		void
			 */
			detach: function() {
				if (exports.isAttached === true ) {
					$('> ul', exports.settingsList).removeClass('dropdown-decorated');
					$('> ul', exports.settingsList).addClass('list-decorated');
					exports.settingsList.appendTo('#dtag_settings .dtag-inner');
					$('#dtag_settings').show();
					$('#dtag_settingslist').show();
					$(document).off('click', '[data-is-settings-caller="true"]');

					exports.isAttached = false;
				}
			},

			/**
			 * Open function
			 *
			 * @return 		void
			 */
			open: function() {
				exports.settingsList.show();
				$(document).on('click.settingsDropdown', function() {
					exports.settingsList.hide();
					$(document).off('click.settingsDropdown');
				});
			},

			/**
			 * Close function
			 *
			 * @return 		void
			 */
			close: function() {
				exports.settingsList.hide();
			}

		};

	return exports;

});
/**
 * @module 			main
 * @description		This is the main js module included via require.js
 * @copyright		mehrwert
 * @version			$Id: main.js 3478 2012-12-10 15:30:48Z m.straschek $
 */
require.config({

	// @TODO This should not be necessary:
	paths: {
		jquery: 'libs/jquery/jquery',
		breakpoint: 'libs/jquery/jquery.mw_breakpoint',
		pageHandler: 'libs/jquery/jquery.dtag_pageHandler',
		headerLoader: 'libs/jquery/jquery.dtag_headerLoader',
		dialogHandler: 'libs/jquery/jquery.dtag_dialogHandler',
		transit: 'libs/jquery/jquery.transit',
		chosen: 'libs/jquery/chosen.jquery'
	}
});

/**
 * Main require function
 * Actually does nothing more but require wrapper module
 *
 * @requires wrapper
 */
define('main',[
  'jquery',
  'shared/config/jquery',
  'template/drawerSlider',
  'template/helpdesk',
  'transit',
  'template/headerLoader',
  'components/rowevents',
  'components/forms',
  'components/tables',
  'breakpoint',
  'components/tooltip',
  'components/toolbar',
  'components/treelist',
  'components/dialogHandler',
  'components/dialog',
  'components/validate'
], function(
  $,
  cfg,
  drawerSlider,
	helpdesk
  ) {
  var settingsSlider,
    settingsDropdown,
    exports = {

    /**
     * Callback functions
     */
    callbacks: {

      /**
       * Smartphone view
       * @scope exports
       */
      smartphone: function() {

        /**
         * @requires    template/moveSearch
         * @requires    template/moveSettings
         * @requires    template/moveTitleBar
         * @requires    template/settingsSlider
         */
        require([
          'template/moveSearch',
          'template/moveSettings',
          'template/moveTitleBar',
          'template/settingsSlider'
        ], function(
          moveSearch,
          moveSettings,
          moveTitleBar,
          settingsSliderObj
          ) {

          moveSearch.move('back');
          moveSettings.move();
          moveTitleBar.move();

          settingsSlider = settingsSliderObj;
          settingsSlider.setDrawerSliderObject(drawerSlider);
			// detach due to possible headerLoader issues
			settingsSlider.detach();
			settingsSlider.attach();

          if ( typeof settingsDropdown === 'object' ) {
            settingsDropdown.detach();
          }

        });
        drawerSlider.moveCaller('#dtag_brandlevel .dtag-grid-col-right');

      },

      /**
       * Tablet view
       * @scope exports
       */
      tablet: function() {

        /**
         * @requires    template/moveSearch
         * @requires    template/moveSettings
         * @requires    template/moveTitleBar
         * @requires    template/settingsDropdown
         */
        require([
          'template/moveSearch',
          'template/moveSettings',
          'template/moveTitleBar',
          'template/settingsDropdown'
        ], function(
          moveSearch,
          moveSettings,
          moveTitleBar,
          settingsDropdownObj
          ) {
          moveSearch.move();
          moveSettings.move('back');
          moveTitleBar.move('back');

          settingsDropdown = settingsDropdownObj;
			// detach due to possible headerLoader issues
			settingsDropdown.detach();
			settingsDropdown.attach();

          if ( typeof settingsSlider === 'object' ) {
            settingsSlider.detach();
          }

        });

        drawerSlider.moveCaller('#dtag_brandlevel .dtag-grid-col-center');

      },

      /**
       * Desktop view
       * @scope exports
       *
       */
      desktop: function() {

        /**
         * @requires    template/moveSearch
         * @requires    template/settingsDropdown
         */
        require([
          'template/moveSearch',
          'template/settingsDropdown'
        ], function(
          moveSearch,
          settingsDropdownObj
          ) {
          moveSearch.move();

          settingsDropdown = settingsDropdownObj;
			// detach due to possible headerLoader issues
			settingsDropdown.detach();
			settingsDropdown.attach();

        });

      }

    },

    /**
     * Init function
     */
    init: function() {

      $('#dtag_jumpmarks').hide();
      $('#dtag_wrapper').css('padding-bottom', '2em');

      drawerSlider.attach();

	  if ($('body.dtag-start-page').length > 0) {
		  helpdesk.appendToTitleBar();
	  } else {
		  helpdesk.appendToServiceLevel();
	  }

      // due to jumpmark issues (having addressed element on top of screen)
      // the wrapper was css-ed with a huge padding bottom
      $('#wrapper').css('padding-bottom', 0);

      $.fn.mw_breakpoint({
        callback: function(device) {

          switch (device) {
            case 'smartphone':
              exports.callbacks.smartphone();
              break;

            case 'tablet':
              exports.callbacks.tablet();
              break;

            case 'desktop':
              exports.callbacks.desktop();
              break;

            default:
              // do nothing;
              break;
          }
        }
      });

    }

  };

  $(function() {
    exports.init();
  });

});
}());